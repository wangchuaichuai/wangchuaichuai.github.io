<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用bcryptjs对nest中的密码进行加密</title>
      <link href="/posts/a0db594.html"/>
      <url>/posts/a0db594.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="threejs着色器—uv动画"><a href="#threejs着色器—uv动画" class="headerlink" title="threejs着色器—uv动画"></a>threejs着色器—uv动画</h3><p>UV动画的实现方式，一种是通过Texture偏移属性offset实现UV动画，另一种方式是通过着色器代码的方式实现UV动画。</p><h4 id="Texture偏移属性offset实现UV动画"><a href="#Texture偏移属性offset实现UV动画" class="headerlink" title="Texture偏移属性offset实现UV动画"></a>Texture偏移属性offset实现UV动画</h4><p>.wrapS定义了纹理如何水平包裹，并对应于UV映射中的U.</p><p>.wrapT这定义了纹理垂直包裹的方式，与UV映射中的V相对应.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> texture <span class="token operator">=</span> textureLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'./texture.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置重复的作用是：能够让一个效果循环</span>texture<span class="token punctuation">.</span>wrapS <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>RepeatWrapping<span class="token punctuation">;</span>texture<span class="token punctuation">.</span>wrapT <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>RepeatWrapping<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染函数周期性执行的过程中，Three.js纹理对象Texture的偏移属性offset两个分量x和y递增或递减。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 每次渲染对纹理对象进行偏移，不停的偏移纹理，就产生了动画的效果</span>  texture<span class="token punctuation">.</span>offset<span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token number">0.001</span><span class="token punctuation">;</span>  texture<span class="token punctuation">.</span>offset<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token number">0.001</span><span class="token punctuation">;</span>  group<span class="token punctuation">.</span><span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.005</span><span class="token punctuation">)</span>  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="着色器中uniform变量更新"><a href="#着色器中uniform变量更新" class="headerlink" title="着色器中uniform变量更新"></a>着色器中uniform变量更新</h4><p>通过自定着色器代码的方式实现UV动画，基本思路就是在片元着色器中声明一个时间变量time，然后在JavaScript代码中更新着色器中的时间变量time。时间变量time变化后，通过vec2 newT= vUv + vec2( -0.02, 0.02 ) * time;改变插值后的纹理坐标vUV，纹理坐标变化了，渲染的时候，纹理采样的结果肯定发生了变化。</p><p>片元着色器中声明的一个时间变量time</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明一个时间变量用来控制UV动画</span>uniform float time<span class="token punctuation">;</span><span class="token comment">// 声明一个纹理对象变量</span>uniform sampler2D texture<span class="token punctuation">;</span><span class="token comment">// 顶点片元化后有多少个片元就有多少个纹理坐标数据vUv</span>varying vec2 vUv<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  vec2 newT<span class="token operator">=</span> vUv <span class="token operator">+</span> <span class="token function">vec2</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">0.02</span><span class="token punctuation">,</span> <span class="token number">0.02</span> <span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">;</span>  <span class="token comment">//通过偏移后的纹理坐标newT采样像素</span>  gl_FragColor <span class="token operator">=</span> <span class="token function">texture2D</span><span class="token punctuation">(</span> texture<span class="token punctuation">,</span> newT <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 整体透明度增加</span>  gl_FragColor<span class="token punctuation">.</span>a <span class="token operator">*=</span><span class="token number">0.6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过自定义着色器ShaderMaterial的属性.uniforms设置传递给片元着色器中的变量time的值</p><pre class="line-numbers language-shaders" data-language="shaders"><code class="language-shaders">uniforms: {  // 对应片元着色器中的时间变量time  time: {    value: 0.0  },},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在渲染函数中不停地更新ShaderMaterial对象uniforms属性的时间变量time的值，每次执行新的渲染，Threejs系统会自动更新片元着色器中的时间变量time的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个时钟对象T</span><span class="token keyword">var</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 渲染函数</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 获得两次渲染的时间间隔deltaTime</span>  <span class="token keyword">var</span> deltaTime <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">getDelta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更新uniforms中时间，这样就可以更新着色器中time变量的值</span>  material<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>time<span class="token punctuation">.</span>value <span class="token operator">+=</span> deltaTime<span class="token punctuation">;</span>  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> threejs </tag>
            
            <tag> 3D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用bcryptjs对nest中的密码进行加密</title>
      <link href="/posts/a0db594.html"/>
      <url>/posts/a0db594.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用bcryptjs对nest中的密码进行加密"><a href="#使用bcryptjs对nest中的密码进行加密" class="headerlink" title="使用bcryptjs对nest中的密码进行加密"></a>使用bcryptjs对nest中的密码进行加密</h3><p>密码不能以明文形式保存到数据库中，否则数据泄露密码就会被知道。而一般的加密方式由于加密规则固定，很容易被破解，安全系数不高。密码加盐的加密方式，能很好的解决这一点。解决字典攻击的方式 是加盐。</p><p>1.bcryptjs是nodejs中比较好的一款加盐(salt)加密的包.<br>2.所谓加盐.就是系统生成一串随机值,然后混入原始密码中,然后按照加密方式生成一串字符串保存在服务器。<br>3.安装</p><pre class="line-numbers language-none"><code class="language-none">npm install bcryptjsyarn add bcryptjscnpm install bcryptjs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * bcryptjs  加密 */</span><span class="token keyword">const</span> bcryptjs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bcryptjs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">'123456789'</span><span class="token punctuation">;</span><span class="token comment">/** * 加密处理 - 同步方法 * bcryptjs.hashSync(data, salt) *    - data  要加密的数据 *    - slat  用于哈希密码的盐。如果指定为数字，则将使用指定的轮数生成盐并将其使用。推荐 10 */</span><span class="token keyword">let</span> hashPassword<span class="token operator">=</span>bcryptjs<span class="token punctuation">.</span><span class="token function">hashSync</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasPwd<span class="token punctuation">)</span> <span class="token comment">// $2a$10$y5WA7lOVpzxVh.pqK3kUzOFZaJZXUMutvb3EG0qocgRxGcKQG36ou</span><span class="token comment">/** * 校验 - 使用同步方法 * bcryptjs.compareSync(data, encrypted) *    - data        要比较的数据, 使用登录时传递过来的密码 *    - encrypted   要比较的数据, 使用从数据库中查询出来的加密过的密码 */</span><span class="token keyword">let</span> comparePwd<span class="token operator">=</span>bcryptjs<span class="token punctuation">.</span><span class="token function">compareSync</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>hashPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>comparePwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">let</span> comparePwd<span class="token operator">=</span>bcryptjs<span class="token punctuation">.</span><span class="token function">compareSync</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>comparePwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nestjs </tag>
            
            <tag> nodejs </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react项目打包后本地运行</title>
      <link href="/posts/3217acb4.html"/>
      <url>/posts/3217acb4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="react项目本地打包后直接运行"><a href="#react项目本地打包后直接运行" class="headerlink" title="react项目本地打包后直接运行"></a>react项目本地打包后直接运行</h3><p>在打包之前,在package.json中private下(位置任意)添加”homepage”: “./“</p><p>这样在你点击index.html时候路径没有问题不会报错,但是页面可能还是空白的</p><p>然后将项目中的引用路由时候的BrowserRouter改为HashRouter,所有用到的地方都要改</p><p>然后执行yarn build 或者 npm run build</p><p>再点开index.html就不会报错</p><p>原因：<br>你必须把build里的文件直接放到应用服务器的根路径下，比如，你的服务器IP是172.16.38.253，应用服务器端口为8080，你应该保证</p><p>在服务器下运行和直接打开html文件有什么区别？<br>最直接的区别，很容易注意到，一个是file协议，另一个是http协议。file协议更多的是将该请求视为一个本地资源访问请求，和你使用资源管理器打开是一样的，是纯粹的请求本地文件。而http请求方式则是通过假架设一个web服务器，解析http协议的请求然后向浏览器返回资源信息。我们所开发的html文件最后必定是会以网页的形式部署在服务器上，通过http协议访问，所以我们开发中也尽可能模拟线上环境，架设本地服务器，来避免file协议与http协议实现过程中的某些差异性，如某些API的差异、跨域请求的差异等。举个最容易验证的例子：在页面引入一张绝对路径的图片，即’/image/example.png’，然后分别通过这两种方式打开页面，file协议会将资源请求到根路径，而http协议虽然也会请求到根路径，但是是相对本地架设的服务器的根路径，一般也就是项目文件夹的路径。<br>html是运行于客户端的超文本语言，从安全性上来讲，服务端不能对客户端进行本地操作。即使有一些象cookie这类的本地操作，也是需要进行安全级别设置的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> 组件 </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实现图片无限旋转</title>
      <link href="/posts/cbf7cc1c.html"/>
      <url>/posts/cbf7cc1c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="css实现图片无限旋转"><a href="#css实现图片无限旋转" class="headerlink" title="css实现图片无限旋转"></a>css实现图片无限旋转</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/路径<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.imgs</span><span class="token punctuation">{</span><span class="token property">-webkit-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite 800ms 0 ease<span class="token punctuation">;</span><span class="token property">-moz-animation</span><span class="token punctuation">:</span> rotateVbtn 5s linear infinite 800ms 0 ease<span class="token punctuation">;</span><span class="token property">-ms-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite 800ms 0 ease<span class="token punctuation">;</span><span class="token property">animation</span><span class="token punctuation">:</span> rotateVbtn 5s linear infinite 800ms 0 ease<span class="token punctuation">;</span><span class="token property">-moz-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token property">-webkit-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token property">-o-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token property">-ms-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token property">animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rotateVbtn1</span> <span class="token punctuation">{</span><span class="token selector">//重复旋转45度，更改成360即可重复旋转0%</span> <span class="token punctuation">{</span><span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">100%</span> <span class="token punctuation">{</span><span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error webpack在打包时候报operation not permitted</title>
      <link href="/posts/50206a6.html"/>
      <url>/posts/50206a6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="webpack在打包时候报这个错：Error-EPERM-operation-not-permitted"><a href="#webpack在打包时候报这个错：Error-EPERM-operation-not-permitted" class="headerlink" title="webpack在打包时候报这个错：Error:EPERM:operation not permitted"></a>webpack在打包时候报这个错：Error:EPERM:operation not permitted</h3><p><a href="https://imgtu.com/i/XFoPDP"><img src="https://s1.ax1x.com/2022/05/25/XFoPDP.png" alt="XFoPDP.png"></a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 输出文件设置为名称+hash</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'js/[name].[hash].js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>只需要将<span class="token punctuation">.</span><span class="token punctuation">.</span>去掉或者<span class="token punctuation">.</span>去掉即可解决<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 输出文件设置为名称+hash</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'js/[name].[hash].js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/dist/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ErrorFailed to load parser ‘babel-eslint‘ declared</title>
      <link href="/posts/6d39992.html"/>
      <url>/posts/6d39992.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Error-Failed-to-load-parser-‘babel-eslint‘-declared-in-‘node-modules-shallowequal-package-json‘-Ca"><a href="#Error-Failed-to-load-parser-‘babel-eslint‘-declared-in-‘node-modules-shallowequal-package-json‘-Ca" class="headerlink" title="Error: Failed to load parser ‘babel-eslint‘ declared in ‘node_modules/shallowequal/package.json‘: Ca"></a>Error: Failed to load parser ‘babel-eslint‘ declared in ‘node_modules/shallowequal/package.json‘: Ca</h3><p><a href="https://imgtu.com/i/XFHPD1"><img src="https://s1.ax1x.com/2022/05/25/XFHPD1.png" alt="XFHPD1.png"></a><br>只需要手动安装 babel-eslint<br>yarn add  -D babel-eslint后重启vscode即可解决</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据页面大小网格布局自适应两行或三行</title>
      <link href="/posts/d18909b7.html"/>
      <url>/posts/d18909b7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="根据页面大小网格布局自适应两行或三行"><a href="#根据页面大小网格布局自适应两行或三行" class="headerlink" title="根据页面大小网格布局自适应两行或三行"></a>根据页面大小网格布局自适应两行或三行</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contain1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contain2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.item1</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.item</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法1. 使用@media媒体查询</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">// 使用<span class="token atrule"><span class="token rule">@media</span> screen 和<span class="token keyword">and</span>连接其定义的最小或者最大的屏幕尺寸，我这里定义大于1366px现实一行4个，小于1366px一行展示三个，如果需要改变列的话，将属性grid-template-columns改成grid-template-rows@media screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>0px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">.contain2</span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 33.3% 33.3% 33.3%<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>1366px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">.contain2</span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 25% 25% 25% 25%<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2. 使用grid属性进行自适应</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">// 使用repeat的auto-fill进行自动填充，然后设置每一块的大小，自己计算一下，我这里设定分界点是1366px，如果大于的话，一个item是300px，稍微给多一点设置margin等间隔能显示出来设置为320px即可.contain1</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> 320px<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在hooks中怎么做类似PureComponent对props的浅比较</title>
      <link href="/posts/3987f34f.html"/>
      <url>/posts/3987f34f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="在hooks中怎么做类似PureComponent对props的浅比较"><a href="#在hooks中怎么做类似PureComponent对props的浅比较" class="headerlink" title="在hooks中怎么做类似PureComponent对props的浅比较"></a>在hooks中怎么做类似PureComponent对props的浅比较</h3><p>在类组件中使用PureComponent可以对props进行浅比较<br>在函数式组件中使用memo包裹组件，使用useMemo包裹值，使用useCallback包裹方法，少一个都会使缓存的组件进行更新无法起到缓存组件的作用</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Demo extends React.PureComponent {// class组件constructor(props) {super(props)this.state = {age: 20}}conponentDidMount() {fetch('xx').then( res =&gt; {if(res) {this.setState({age: res.age})}})}   const setAgeH = () =&gt; {}   const setnameH = () =&gt; {}   const setAgeH = usecallback( () =&gt; {}, [])   const setnameH = usecallback( () =&gt; {}, [])render() {const { age } = this.statereturn &lt;div&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;{{age}}&lt;/span&gt;   &lt;/div&gt;}}// hooksconst Age = React.memo(({age,setAge}) =&gt; {return &lt;div&gt;{{age}}&lt;/div&gt;})function Demo() {       useEffect( () =&gt; {               console.log(fetchInfo)           }, [fetchInfo])       const fetchInfo = useCallback ( () =&gt; {               fetch('xxx').then( res =&gt; {                   if(res){                       // setAge(res.age)                       setAge((oldAge) =&gt; {                           return oldAge + res.age                       })                   }               })           }, [name])       return  &lt;div&gt;               &lt;span&gt;年龄&lt;/span&gt;               &lt;span&gt;{{age}}&lt;/span&gt;               &lt;Age age={{age}} setAge={{setAgeH}} /&gt;               &lt;Name name={{name}} setname={{setnameH}} /&gt;               &lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react memo 和 react.fc的使用</title>
      <link href="/posts/7fb96dfc.html"/>
      <url>/posts/7fb96dfc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="react-memo-和-react-fc的使用"><a href="#react-memo-和-react-fc的使用" class="headerlink" title="react memo 和 react.fc的使用"></a>react memo 和 react.fc的使用</h3><p>1.memo<br>介绍：<br>React.memo 为高阶组件。它与 React.PureComponent 非常相似，但它适用于函数组件，但不适用于 class 组件。<br>如果你的函数组件在给定相同 props 的情况下渲染相同的结果，那么你可以通过将其包装在 React.memo 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。<br>React.memo 仅检查 props 变更。如果函数组件被 React.memo 包裹，且其实现中拥有 useState 或 useContext 的 Hook，当 context 发生变化时，它仍会重新渲染。<br>默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const comp = () =&gt; {return &lt;div&gt;1&lt;/div&gt;}export default React.memo(comp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>总结：包裹函数组件 避免相同prop下的重复渲染，以达到优化效果</p><p>2.React.FC<br>介绍：</p><p>1.React.FC是函数式组件，是在TypeScript使用的一个泛型，FC就是FunctionComponent的缩写，事实上React.FC可以写成React.FunctionComponent：</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const App: React.FunctionComponent&lt;{ message: string }&gt; = ({ message }) =&gt; (  &lt;div&gt;{message}&lt;/div&gt;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.React.FC 包含了 PropsWithChildren 的泛型，不用显式的声明 props.children 的类型。React.FC&lt;&gt; 对于返回类型是显式的，而普通函数版本是隐式的（否则需要附加注释）。<br>3.React.FC提供了类型检查和自动完成的静态属性：displayName，propTypes和defaultProps（注意：defaultProps与React.FC结合使用会存在一些问题）。</p><p>```react<br>interface IProps {<br>    name: string<br>    phone: number<br>}<br>const App: React.FC<iprops> = (props: PropsWithChildren<iprops>) =&gt; {<br>    const { name, phone } = props<br>    return </iprops></iprops></p><div>{ name }</div><br>}<p></p><p>使用：<br>总结：React.FC 表示使用类型检查并且表示是函数式组件</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useEffect使用定时器出现重复问题</title>
      <link href="/posts/1e589684.html"/>
      <url>/posts/1e589684.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="useEffect使用定时器出现重复问题"><a href="#useEffect使用定时器出现重复问题" class="headerlink" title="useEffect使用定时器出现重复问题"></a>useEffect使用定时器出现重复问题</h3><p>react中设置定时器，最后需要将定时器清理，否则下次会出现多次调用的问题<br>使用useEffect来模拟componentWillUnmount生命周期来进行</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Timer() {    let [time, setTime] = useState(5);    useEffect(() =&gt; {        let timer = setInterval(() =&gt; {          setTime(time - 1);        }, 1000)        return () =&gt; clearInterval(timer);    }, );    return &lt;div&gt;{time}&lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React中useState两次渲染</title>
      <link href="/posts/6556e27c.html"/>
      <url>/posts/6556e27c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="React中useState两次渲染"><a href="#React中useState两次渲染" class="headerlink" title="React中useState两次渲染"></a>React中useState两次渲染</h3><p>函数式组件使用useState后，console.log打印组件重复渲染<br>问题<br>  index.tsx中的&lt;React.StrictMode&gt;的问题</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">ReactDOM.render(&lt;React.StrictMode&gt;&lt;App /&gt;&lt;/React.StrictMode&gt;document.getElementById('ROOT'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在生产模式下不会出现此问题<br>StrictMode有助于</p><ul><li>识别不安全的生命周期</li><li>关于使用过字符串 ref API的警告</li><li>关于使用废弃的findDOMNode方法的警告</li><li>监测意外的副作用</li><li>监测过时的context API</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Yarn创建React项目遇到的问题</title>
      <link href="/posts/7e5ed880.html"/>
      <url>/posts/7e5ed880.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用Yarn创建React项目遇到的问题"><a href="#使用Yarn创建React项目遇到的问题" class="headerlink" title="使用Yarn创建React项目遇到的问题"></a>使用Yarn创建React项目遇到的问题</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">yarn create react-app antd-demoyarn create v1.17.3[1/4] Resolving packages...[2/4] Fetching packages...[3/4] Linking dependencies...[4/4] Building fresh packages...success Installed "create-react-app@3.1.1" with binaries:      - create-react-app[############################################################################################] 92/92Creating a new React app in H:\React\demo.Installing packages. This might take a couple of minutes.Installing react, react-dom, and react-scripts...yarn add v1.17.3info No lockfile found.[1/4] Resolving packages...[2/4] Fetching packages...error eslint@6.2.2: The engine "node" is incompatible with this module. Expected version "^8.10.0 || ^10.13.0 || &gt;=11.10.1". Got "10.8.0"error Found incompatible module.info Visit https://yarnpkg.com/en/docs/cli/add for documentation about this command.Aborting installation.  yarnpkg add --exact react react-dom react-scripts --cwd H:\React\antd-demo has failed.Deleting generated file... package.jsonDeleting antd-demo/ from H:\ReactDone.error Command failed.Exit code: 1Command: C:\Users\YWL\AppData\Local\Yarn\bin\create-react-appArguments: antd-demoDirectory: H:\ReactOutput:info Visit https://yarnpkg.com/en/docs/cli/create for documentation about this command.PS H:\React&gt; yarn startyarn run v1.17.3error Couldn't find a package.json file in "H:\\React"info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决</p><pre class="line-numbers language-none"><code class="language-none">yarn config set ignore-engines true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react报错 Can&#39;t perform a React state update on an unmounted component</title>
      <link href="/posts/3b89b733.html"/>
      <url>/posts/3b89b733.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="react报错：Can’t-perform-a-React-state-update-on-an-unmounted-component"><a href="#react报错：Can’t-perform-a-React-state-update-on-an-unmounted-component" class="headerlink" title="react报错：Can’t perform a React state update on an unmounted component"></a>react报错：Can’t perform a React state update on an unmounted component</h3><p>在React开发中，我们经常可能会遇到这样一个警告：</p><pre class="line-numbers language-error" data-language="error"><code class="language-error">ERROR: Can't perform a React state update on an unmounted componentThis is a no-op, but it indicates a memory leak in your application.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们不能在组件销毁后设置state，防止内存泄漏<br>关于react中切换路由时报以上错误，实际的原因是因为在组件挂载（mounted）之后进行了异步操作，比如ajax请求或者设置了定时器等，而你在callback中进行了setState操作。当你切换路由时，组件已经被卸载（unmounted）了，此时异步操作中callback还在执行，因此setState没有得到值。</p><p>解决的方式有两种：</p><p>一、在卸载的时候对所有的操作进行清除（例如：清除定时器）</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">componentDidMount = () =&gt; {timer = setTimeout( () =&gt; {}, 1000)}componentWillUnMount = () =&gt; {clearTimeout(timer)}// hooks中使用useeffect模拟生命周期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、设置一个flag，当unmount的时候重置这个flag</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">componentDidMount =() =&gt; {this.flag = trueaxios操作}componentWillUnMount =() =&gt; {this.flag = false}// hooks中使用useeffect模拟生命周期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、最简单的方式（万金油）</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">componentDidMount =() =&gt; {axios请求}componentWillUnmount =() =&gt; {this.setState = (state, callback) =&gt; {return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript使用可选属性报错可能未定义</title>
      <link href="/posts/57632486.html"/>
      <url>/posts/57632486.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="typescript使用可选属性报错可能未定义"><a href="#typescript使用可选属性报错可能未定义" class="headerlink" title="typescript使用可选属性报错可能未定义"></a>typescript使用可选属性报错可能未定义</h3><p>当使用可选属性的时候，可能会报参数未定义的错误</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>user<span class="token operator">:</span><span class="token builtin">string</span>name<span class="token operator">:</span><span class="token operator">?</span><span class="token builtin">string</span>password<span class="token operator">:</span><span class="token operator">?</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">UserInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span> state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token operator">:</span> Info<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">...</span>state<span class="token punctuation">}</span><span class="token keyword">case</span><span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">...</span>state<span class="token punctuation">}</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">...</span>state<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决：<br>将tsconfig.json中的strict属性设置为false，取消严格模式即可</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端进行下载图片</title>
      <link href="/posts/b3977ed7.html"/>
      <url>/posts/b3977ed7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前端进行下载图片"><a href="#前端进行下载图片" class="headerlink" title="前端进行下载图片"></a>前端进行下载图片</h3><ol><li>同源情况</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// 这种情况下必须是同源，否则download则会失效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你的图片的地址<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>名字<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>下载图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>非同源情况</li></ol><p>原理类似，不过利用canvas来进行画图</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getIt</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span><span class="token literal-property property">src</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> src <span class="token operator">=</span> src   <span class="token keyword">let</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span>   <span class="token keyword">let</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>   image<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'crossOrigin'</span><span class="token punctuation">,</span> <span class="token string">'anonymous'</span><span class="token punctuation">)</span>   image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> image<span class="token punctuation">.</span>width     canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> image<span class="token punctuation">.</span>height     <span class="token keyword">let</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span>     context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>height<span class="token punctuation">)</span>     canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>height<span class="token punctuation">)</span>     <span class="token comment">//   const url = canvas.toDataURL('image/png')</span>     canvas<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>       link<span class="token punctuation">.</span>href <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>       link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">'fileName'</span>       link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>   image<span class="token punctuation">.</span>src <span class="token operator">=</span> src <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React useNavigate 和 useLocation的使用</title>
      <link href="/posts/e78137ec.html"/>
      <url>/posts/e78137ec.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="React-useNavigate-和-useLocation的使用"><a href="#React-useNavigate-和-useLocation的使用" class="headerlink" title="React useNavigate 和 useLocation的使用"></a>React useNavigate 和 useLocation的使用</h3><p>使用useNavigate来跳转，在页面内使用useLocation来接收数据</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 发送import { useNavigate } from 'react-router-dom'let navigate = useNavigate()function post() {let name = 'hello'let psw = 123123navigate('name',{state: {name: name,psw: psw}})}// 接收import { useLocation } from 'react-router-dom'let localtion = useNavigate()const { state1 } = localtionconst   state2   = localtion.state// 均能获取数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useSelector与useDispatch</title>
      <link href="/posts/65b0b16f.html"/>
      <url>/posts/65b0b16f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="useSelector与useDispatch"><a href="#useSelector与useDispatch" class="headerlink" title="useSelector与useDispatch"></a>useSelector与useDispatch</h3><p>在hooks中替代connect来连接react和redux的方式是用useDispatch和useSelector，就无需使用connect的一堆模式化的语法了<br><a href="https://imgtu.com/i/qM4IUJ"><img src="https://s1.ax1x.com/2022/03/22/qM4IUJ.png" alt="qM4IUJ.png"></a><br>useSelector和mapStateToProps效果类型，是用来get数据的，但是使用起来异常简介<br>有两个参数，第一个传入一个函数，返回一个对象，对象里面可以获取到store中的数据，第二个值是对性能优化的，传入的值来判断true or false来决定是否重新渲染，类似React.memo的第二个参数，进行一次浅比较</p><p>useDispatch则是用来dispatch一个action的，如上图创建后直接在括号中写入要dispatch的action即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>name<span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">psw</span><span class="token operator">:</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样即可dispatch成功</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React报错 TypeError Cannot call a class as a function</title>
      <link href="/posts/f450a672.html"/>
      <url>/posts/f450a672.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="React报错：TypeError-Cannot-call-a-class-as-a-function"><a href="#React报错：TypeError-Cannot-call-a-class-as-a-function" class="headerlink" title="React报错：TypeError: Cannot call a class as a function"></a>React报错：TypeError: Cannot call a class as a function</h3><p>极其极其不小心的错误，redux-thunk异步组件的引入是引入redux-thunk而不是引入react-thunk，否则代码不会报错反而代码写完后运行报错</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts不显示</title>
      <link href="/posts/676031c.html"/>
      <url>/posts/676031c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Echarts不显示"><a href="#Echarts不显示" class="headerlink" title="Echarts不显示"></a>Echarts不显示</h3><p>在完成加入echarts后的网页中虽然能查看到元素节点，但是并没有显示出来，原因是因为没有给标签高度，可以给标签高度或者给创建的ECharts元素加size属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span>myChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token string">'100px'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能正常显示了</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts Initialize failed invalid dom 根本解决</title>
      <link href="/posts/651e55e3.html"/>
      <url>/posts/651e55e3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Echarts在渲染时出错Uncaught-Error-Initialize-failed-invalid-dom"><a href="#Echarts在渲染时出错Uncaught-Error-Initialize-failed-invalid-dom" class="headerlink" title="Echarts在渲染时出错Uncaught Error: Initialize failed: invalid dom"></a>Echarts在渲染时出错Uncaught Error: Initialize failed: invalid dom</h3><p>其原因是因为dom还没有渲染完就开始ECharts的初始化（init）操作</p><p>解决<br>react：可以将其放在useEffect函数中，在结构全部渲染完毕之后再进行ECharts的渲染操作</p><p><a href="https://imgtu.com/i/qMftIA"><img src="https://s1.ax1x.com/2022/03/22/qMftIA.png" alt="qMftIA.png"></a></p><p>vue：使用ref来解决，使用this.$ref来获取对应的标签而不是用getELementById</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>process.env.NODE_ENV === &#39;production&#39; 总是为false或无法使用该命令</title>
      <link href="/posts/8f8d86be.html"/>
      <url>/posts/8f8d86be.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue当文字很多的时候使用…代替"><a href="#vue当文字很多的时候使用…代替" class="headerlink" title="vue当文字很多的时候使用…代替"></a>vue当文字很多的时候使用…代替</h3><p>原本的配置是</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// linux或者mac</span><span class="token string-property property">"serve"</span><span class="token operator">:</span><span class="token string">"NODE_ENV=production node app.js"</span><span class="token comment">// windows</span><span class="token string-property property">"serve"</span><span class="token operator">:</span><span class="token string">"SET NODE_ENV=production &amp;&amp; node app.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而console.log一下命令发现始终为false，无法转为生产环境<br>而在打印出的情况下发现production的签名是有一个空格的，问题根本发现，是在命令中输入空格的时候不会自动省略而是也把他加入到了执行的命令中，而他又判断production和空格+production不一致所以始终为false<br>所以</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"serve"</span><span class="token operator">:</span><span class="token string">"SET NODE_ENV=production&amp;&amp; node app.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还要注意一点在windows下使用scripty来管理命令的时候是.bat后缀而不是linux下的.sh后缀</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>样式中隐藏滚动条</title>
      <link href="/posts/22f4609d.html"/>
      <url>/posts/22f4609d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="样式中隐藏滚动条"><a href="#样式中隐藏滚动条" class="headerlink" title="样式中隐藏滚动条"></a>样式中隐藏滚动条</h3><p>项目中有一个长页面，而内部内容多则会撑开组件的长度，此时会出现滚动条，而有时候这个滚动条会特别难看，需要有一个隐藏滚动条的操作。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// 适用于chrom内核与safari环境下.box::-webkit-scrollbar</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">// 适用于IE10或以上.box</span><span class="token punctuation">{</span><span class="token property">-ms-overflow-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">// 适用于firefox.box</span><span class="token punctuation">{</span><span class="token property">overflow</span><span class="token punctuation">:</span>-moz-scrollbars-none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不是这些环境的话，只需要设置其滚动条所在的高度比你容器的高度大即可，这样就能把滚动条所在的位置挤出去完成界面上的’隐藏滚动条’</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Can&#39;t perform a React state update on an unmounted component. This is a no-</title>
      <link href="/posts/da69ad47.html"/>
      <url>/posts/da69ad47.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Warning-Can’t-perform-a-React-state-update-on-an-unmounted-component-This-is-a-no"><a href="#Warning-Can’t-perform-a-React-state-update-on-an-unmounted-component-This-is-a-no" class="headerlink" title="Warning: Can’t perform a React state update on an unmounted component. This is a no-"></a>Warning: Can’t perform a React state update on an unmounted component. This is a no-</h3><p>react报错<br><a href="https://imgtu.com/i/bXy95n"><img src="https://s1.ax1x.com/2022/03/14/bXy95n.png" alt="bXy95n.png"></a><br>其根本是原因是在组件销毁后异步操作还没有完成，但是组件又销毁了而出现的问题。<br>解决方法：最简单的就是将其放置在WillUnmount中防止销毁后依旧调用</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">componentDidMount = () =&gt; {axios操作.then( res =&gt; {this.setState({设置值})})}componentWillUnmount(){this.setState = (state, callback) =&gt; {return ;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可解决报错</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>forEach和for的return</title>
      <link href="/posts/dea3fb4f.html"/>
      <url>/posts/dea3fb4f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="记一次小结"><a href="#记一次小结" class="headerlink" title="记一次小结"></a>记一次小结</h4><p>在forEach循环中使用return会跳出本次循环然后进行下一次<br>在for中使用return会直接结束循环</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'forEach'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>    <span class="token keyword">return</span> item<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'for'</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS与QA</title>
      <link href="/posts/bb4fa3e3.html"/>
      <url>/posts/bb4fa3e3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="函数式编程与单元测试"><a href="#函数式编程与单元测试" class="headerlink" title="函数式编程与单元测试"></a>函数式编程与单元测试</h4><p>性能测试：autocannon、wrk、jarvis<br>接口测试：Mocha、Mock Service Worker、SuperTest、AVA<br>单元测试：Enzyme、react-testing-library、Istanbul<br>断言库：Jasmine、Chai<br>综合测试：Karma、Jest、Polly.js(拦截、重放)、storybook、F2eTest、sinonjs（storybook+jest 比较好)<br>E2E测试：Cypress、jsdom、Browsersync、selenium-webdriver、pupeteer、NightWatch、WebdriverIP<br>模拟测试：json-server、nock(http转发)<br>UI测试：BacktopJS</p><h4 id="单元测试框架"><a href="#单元测试框架" class="headerlink" title="单元测试框架"></a>单元测试框架</h4><p>better-assert(TDD断言库)<br>should.js(BDD断言库)<br>expect.js(BDD断言库)<br>chai.js(TDD BDD 双模)<br>Jasmine.js(BDD)<br>Node.js本身集成 require(“assert”)<br>Intern 单元测试框架<br>QUnit jQuery得测试框架<br>Macaca 完整得自动化测试解决方案 from阿里巴巴 </p><h4 id="单元测试运行流程"><a href="#单元测试运行流程" class="headerlink" title="单元测试运行流程"></a>单元测试运行流程</h4><p>  before  ==&gt;  beforeEach  ==&gt;  it   ==&gt;   after  =&gt;  afterEach<br>  1.before单个测试用力(it)开始前<br>  2.beforeEach每一个测试用例开始前<br>  3.it定义测试用例，并利用断言库进行设置chai如:expect(x).to.equal(true)； 异步mocha<br>  4.利用mock</p><h4 id="karma自动化单元测试"><a href="#karma自动化单元测试" class="headerlink" title="karma自动化单元测试"></a>karma自动化单元测试</h4><p>karma  自动化runner集成PhantomJS无刷新(<br>yarn add karma -D<br>启动器<br>yarn add karma-jasmine karama-chrome-launcher jasmine-core -D<br>)<br>npm install -g karma<br>npm install karma-cli -D<br>npm install karma-chrome-launcher -D<br>npm install karma-phantomjs-launcher -D<br>npm install karma-mocha -D<br>npm install karma-chai -D</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>创建项目后创建tests文件夹存放测试<br>后缀为xxx.spec.js<br>通用语法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'测试XXX函数'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"XXX函数中得某一个应用"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//断言库得使用稍有区别</span>   <span class="token function">expect</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>karma.conf.js文件中得files中添加测试文件和被测试文件<br>eg:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token literal-property property">files</span><span class="token operator">:</span><span class="token punctuation">[</span>   <span class="token string">'./test/**/*.js'</span><span class="token punctuation">,</span><span class="token comment">//ps:/**/*.js是递归查找得意思,windows不支持</span>   <span class="token string">'./test/**/*.spec.js'</span>   <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装好karma后需要在package.json中配置karma<br>在scripts中添加配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"karma:init"</span><span class="token operator">:</span> <span class="token string">"karma init"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行yarn karma:init来添加需要得配置，具体看karma官网</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"karma:start"</span><span class="token operator">:</span> <span class="token string">"karma start"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> QA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS问题总结</title>
      <link href="/posts/bf3cf5fa.html"/>
      <url>/posts/bf3cf5fa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="toPrimitive"><a href="#toPrimitive" class="headerlink" title="toPrimitive"></a>toPrimitive</h3><p>需要先在valueOF中找返回值，再在toString中找</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>装箱：把基本的数据类型转化为对应的引用类型<br>拆箱：把引用类型的数据转化为对应的基本类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">'哈哈'</span><span class="token punctuation">;</span> <span class="token comment">// new String('哈哈')，进行了一层装箱，使s1可以使用字符串的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span>代表一个代码块，则<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>代表  <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 则为<span class="token number">0</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">不能直接使用，因为会被识别成代码块，需要将用</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">包裹</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 为 <span class="token string">'[object Object]'</span> object为标识符，Object为类型在ts中只能用object而不能用Object因为范围太宽泛了<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  为  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueoF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 为 <span class="token string">""</span>空字符串则<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 为 <span class="token string">""</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  为 <span class="token string">'[object Object]'</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span>  为<span class="token boolean">true</span>，<span class="token punctuation">[</span><span class="token punctuation">]</span>换后为<span class="token string">''</span>空字符串，但是js中<span class="token string">'  '</span>不管里面有多少空格也是<span class="token boolean">false</span>在比较的时候需要拆箱，在用<span class="token keyword">if</span>等条件的时候为<span class="token boolean">true</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">拼接</span><span class="token punctuation">(</span><span class="token string">'b'</span> <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token operator">+</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>结果为<span class="token string">'banana'</span>拆解为  b <span class="token operator">+</span> a <span class="token operator">+</span>  <span class="token punctuation">(</span><span class="token operator">+</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> a，中间是加上一个<span class="token operator">+</span><span class="token string">'a'</span>，结果为<span class="token constant">NAN</span>，<span class="token constant">NAN</span>是一个非常特殊的数字<span class="token number">0</span> <span class="token operator">==</span> “<span class="token number">0</span>” 为<span class="token boolean">true</span>虽然不是一种数据类型但是需要拆箱<span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  为 <span class="token string">"0"</span><span class="token number">0.</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  为<span class="token string">"0"</span><span class="token number">0</span>不能直接拆箱需要<span class="token punctuation">.</span>来转为对象再调用方法装箱的时候则不行<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  结果为<span class="token boolean">false</span><span class="token number">0</span>在任何里面的Boolean都为<span class="token boolean">false</span><span class="token constant">NAN</span> <span class="token operator">==</span> <span class="token number">0</span>        <span class="token boolean">false</span><span class="token constant">NAN</span> <span class="token operator">==</span> <span class="token constant">NAN</span>  <span class="token boolean">false</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span>     <span class="token boolean">true</span><span class="token keyword">null</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>  为<span class="token boolean">true</span>  <span class="token keyword">null</span>  <span class="token operator">&gt;=</span>  <span class="token number">0</span>   为<span class="token boolean">true</span>  但是 <span class="token keyword">null</span> <span class="token operator">&lt;</span>  <span class="token number">0</span>  为<span class="token boolean">false</span> <span class="token operator">||</span>  <span class="token keyword">null</span> <span class="token operator">&gt;</span>  <span class="token number">0</span>  为<span class="token boolean">false</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">[</span>object Object<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token number">1</span><span class="token operator">+</span><span class="token constant">NAN</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token constant">NAN</span><span class="token number">1.</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token operator">+</span>obj<span class="token punctuation">.</span>one<span class="token operator">?.</span>name <span class="token operator">??</span> <span class="token string">'哈哈'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">//NaN</span><span class="token number">2.</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token operator">~</span>obj<span class="token punctuation">.</span>one<span class="token operator">?.</span>name <span class="token operator">??</span> <span class="token string">'哈哈'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">//-1</span><span class="token operator">+</span> <span class="token operator">-</span> 转为<span class="token constant">NAN</span>  <span class="token operator">~</span>转为 <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>都是运算符<span class="token operator">??</span>  代表前面是否是<span class="token keyword">null</span>或者<span class="token keyword">undefined</span>，是则为后面<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'哈哈'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">// String</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token comment">//false</span>a的类型是一个string但是是装箱后的，本身只是一个自变量无任何意义，只有在使用的时候才去装箱成为对应的类型<span class="token number">3</span>个可能造成闭包的东西<span class="token number">1.</span> eval<span class="token number">2.</span> <span class="token keyword">with</span><span class="token punctuation">(</span>vue底层大量使用<span class="token punctuation">)</span>在<span class="token keyword">with</span>绑定的东西若在变量中找不到则会将其注册在全局中<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">with</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token string">'哈哈'</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>a  <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token keyword">undefined</span>a <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token string">'哈哈'</span><span class="token number">3.</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'console.log(a)'</span><span class="token punctuation">)</span>加引号会在全局中访问a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法初步学习</title>
      <link href="/posts/81ca12be.html"/>
      <url>/posts/81ca12be.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="算法的五大特征"><a href="#算法的五大特征" class="headerlink" title="算法的五大特征"></a>算法的五大特征</h4><ol><li>有穷性：算法必须能在执行有限个步骤之后终止</li><li>确切性：每一步骤必须有确切的定义</li><li>输入项：有0个或者多个输入，来规定初始情况，0个指的是算法本事定出了初始条件</li><li>输出项：有一个或者多个输出，是对输入数据处理后的结果，没有输出的算法毫无意义</li><li>可行性：算法中执行的任何计算步骤都是可以被分解为基本的可执行的操作步，每个计算步都可以在有限时间内完成(也被称为有效性)</li></ol><h4 id="衡量好坏"><a href="#衡量好坏" class="headerlink" title="衡量好坏"></a>衡量好坏</h4><ol><li>复杂度：时间(拆分为基本步骤而不是看执行次数)、空间复杂度</li><li>正确性：不能有隐含bug</li><li>可读性：能不能很好的维护</li><li>健壮性(鲁棒性)</li></ol><h4 id="必须掌握的基本算法"><a href="#必须掌握的基本算法" class="headerlink" title="必须掌握的基本算法"></a>必须掌握的基本算法</h4><h5 id="枚举算法"><a href="#枚举算法" class="headerlink" title="枚举算法"></a>枚举算法</h5><p>核心：枚举所有可能<br>本知：从所有候选答案中去搜索正确的解，使用该算法需要满足两个条件</p><ol><li>可预先确定候选答案的数量</li><li>候选答案的范围在求解之前必须有一个确定的集合</li></ol><p>特点：<br>枚举算法简单粗暴，暴力的枚举所有可能，尽可能地尝试所有地方法<br>速度慢<br>实现最简单，并且得到地结果总是正确地</p><h5 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h5><p>核心：通过重复将问题分解为同类地子问题<br>特点：</p><ol><li>函数可以通过调用自身来进行递归</li><li>递归可以完全取代循环</li></ol><p>递归由两部分组成：<br>递归主体，就是要循环解决地问题地代码<br>递归跳出地条件，否则回一直递归爆栈</p><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>稳定性是一组数据排序后可能出现结果不一样<br>例如a,b数据一样但是排序后a可能在b前也可能在b后<br>排序法   最佳时间复杂度  平均时间复杂度  最差时间复杂度  空间复杂度  稳定性<br>冒泡                n                  n²                 n²                    1             yes<br>插入                n                  n²                 n²                    1             yes<br>选择                n²               n²                n²                 1             no<br>二叉树                nlogn             nlogn              nlogn                  1             yes<br>快速                n logn               nlogn             n²               logn~n         no<br>堆排序                nlogn            nlgon            nlogn            1             no<br>希尔                nlogn             nlgon                n²                1             no</p><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><p>查找算法               平均时间复杂度                              查找条件<br>顺序查找            n                      无需或有序队列<br>二分(折半查找)        nlogn                        有序数组<br>二叉排序树查找             nlogn                   二叉排序树<br>哈希表法(散列表)        1                先创建哈希表(散列表)<br>分块查找            nlogn                   无序或有序队列</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置localstorage过期时间</title>
      <link href="/posts/115e4fbf.html"/>
      <url>/posts/115e4fbf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="设置localstorage过期时间"><a href="#设置localstorage过期时间" class="headerlink" title="设置localstorage过期时间"></a>设置localstorage过期时间</h4><p>由于localstorage一旦存入除非手动清除则无法删除内容，而我们又需要定期调用来保证数据的更新，所以需要存入一个时间</p><p>过程：<br>在存入localstorage的时候同时存入当下的事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> storage <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token keyword">var</span> currTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">res1</span><span class="token operator">:</span> res1<span class="token punctuation">,</span>  <span class="token literal-property property">res2</span><span class="token operator">:</span> res2<span class="token punctuation">,</span>  <span class="token literal-property property">res3</span><span class="token operator">:</span> res3<span class="token punctuation">,</span>  <span class="token literal-property property">res4</span><span class="token operator">:</span> res4<span class="token punctuation">,</span>  <span class="token literal-property property">res5</span><span class="token operator">:</span> res5<span class="token punctuation">,</span>  <span class="token literal-property property">time</span><span class="token operator">:</span> currTime<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时从localstorage的res中即可读取到存入的对应信息以及time<br>在读取的时候new一个时间，与存入的时间进行对比，若超出存放时间则手动清空localstorage的内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">// 时间多余500s则重新请求</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> res<span class="token punctuation">.</span>time <span class="token operator">&gt;</span> <span class="token number">6500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getTime<span class="token punctuation">)</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>currTime<span class="token punctuation">)</span>           storage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'本地化未存储'</span><span class="token punctuation">)</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS伪类/元素</title>
      <link href="/posts/216ce903.html"/>
      <url>/posts/216ce903.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="CSS-伪类-Pseudo-classes"><a href="#CSS-伪类-Pseudo-classes" class="headerlink" title="CSS 伪类(Pseudo-classes)"></a>CSS 伪类(Pseudo-classes)</h4><p>CSS伪类是用来添加一些选择器的特殊效果<br>语法<br>selector:pseudo-class {property:value;}<br>css的类也可以使用伪类<br>selector.class:pseudo-class {property:value;}<br>可以通过选择对应的类来更改后端传回的带有html标签的样式</p><p>所有的选择器<br>选择器                                  示例                            示例说明<br>:checked        input:checked             选择所有选中的表单元素<br>:disabled         input:disabled                  选择所有禁用的表单元素<br>:empty               p:empty                        选择所有没有子元素的p元素<br>:enabled        input:enabled           选择所有启用的表单元素<br>:first-of-type          p:first-of-type            选择的每个 p 元素是其父元素的第一个 p 元素<br>:in-range              input:in-range          选择元素指定范围内的值<br>:invalid              input:invalid                     选择所有无效的元素<br>:last-child                 p:last-child                  选择所有p元素的最后一个子元素<br>:last-of-type        p:last-of-type                 选择每个p元素是其母元素的最后一个p元素<br>:not(selector)        :not(p)                             选择所有p以外的元素<br>:nth-child(n)        p:nth-child(2)                       选择所有 p 元素的父元素的第二个子元素<br>:nth-last-child(n)    p:nth-last-child(2)                   选择所有p元素倒数的第二个子元素<br>:nth-last-of-type(n)    p:nth-last-of-type(2)    选择所有p元素倒数的第二个为p的子元素<br>:nth-of-type(n)        p:nth-of-type(2)     选择所有p元素第二个为p的子元素<br>:only-of-type      p:only-of-type       选择所有仅有一个子元素为p的元素<br>:only-child               p:only-child                  选择所有仅有一个子元素的p元素<br>:optional            input:optional              选择没有”required”的元素属性<br>:out-of-range    input:out-of-range     选择指定范围以外的值的元素属性<br>:read-only           input:read-only          选择只读属性的元素属性<br>:read-write          input:read-write     选择没有只读属性的元素属性<br>:required          input:required      选择有”required”属性指定的元素属性<br>:root                  root                             选择文档的根元素<br>:target                   #news:target                选择当前活动#news元素(点击URL包含锚的名字)<br>:valid                   input:valid                选择所有有效值的属性<br>:link                   a:link                     选择所有未访问链接<br>:visited          a:visited                      选择所有访问过的链接<br>:active                  a:active                      选择正在活动链接<br>:hover                 a:hover                 把鼠标放在链接上的状态<br>:focus                 input:focus           选择元素输入后具有焦点<br>:first-letter      p:first-letter            选择每个</p><p> 元素的第一个字母<br>:first-line              p:first-line              选择每个</p><p> 元素的第一行<br>:first-child     p:first-child            选择器匹配属于任意元素的第一个子元素的 </p><p> 元素<br>:before                 p:before                  在每个</p><p>元素之前插入内容<br>:after                   p:after                      在每个</p><p>元素之后插入内容<br>:lang(language)    p:lang(it)               为</p><p>元素的lang属性选择一个开始值</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的跨域问题，axios和vue.config.js的devServer.proxy</title>
      <link href="/posts/3017c2cf.html"/>
      <url>/posts/3017c2cf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="vue中的跨域问题，axios和vue-config-js的devServer-proxy"><a href="#vue中的跨域问题，axios和vue-config-js的devServer-proxy" class="headerlink" title="vue中的跨域问题，axios和vue.config.js的devServer.proxy"></a>vue中的跨域问题，axios和vue.config.js的devServer.proxy</h4><p>在开发/测试环境中，因为下面会使用proxy方法，所以此处的baseURL不太重要，它在proxy中会被替换，随便写也没事</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 创建 axios 实例 开发域名const wristbandService = axios.create({  baseURL: '',                                   //设置为空  // baseURL: 'xxx',      //设置baseURL相当于给所有此类请求前加上baseURL，这里可以用导入的变量  timeout: 6000,  headers: {    'Content-Type': 'application/json; charset=utf-8'  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vue.config.js中devServer配置<br>注意：devServer用于本地开发环境，生产环境是不生效的。<br><a href="https://cli.vuejs.org/zh/config/#devserver-proxy">https://cli.vuejs.org/zh/config/#devserver-proxy</a></p><p>在下面的代码里：</p><p>1、proxy会拦截所有url中可以成功匹配到 ‘/api/wristband’ 的请求。（proxy采用正则匹配，一旦url中包含你要的字符串则停止向下匹配，详查proxy匹配规则）</p><p>2、它会把拦截到的请求中的baseUrl替换为此处的target</p><p>3、changeOrigin：true 表示跨域</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">module.exports = {  // pabulicPath:process.env.NODE_ENV === 'production' ? '' : '',  devServer: {    host: '0.0.0.0',    port: '8080',    // https:false,    open: true,    proxy: {      //配置跨域      '/': {        target: 'xxx',        ws: true,        changeOrigin: true,        pathRewrite: {          '^/': '',        },      },    },  },}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>api调用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import service from './request'export default {  //搜索检索  getSearch(text) {    return service.get(`/tstd/search/?kw=${text}`)  },}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点<br>api发出请求时，会将此处的url前面加上配置过的baseURL，这一个整体，会被proxy检测拦截，proxy操作过后就可以跨域了</p><p>生产(线上)环境的跨域问题：后端Nginx反向代理/cors跨域配置<br>由于devServer只用于本地环境，生产环境是不生效的，所以上面所说的devServer.proxy方法无效</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的NAN</title>
      <link href="/posts/b938e569.html"/>
      <url>/posts/b938e569.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="JS中的NAN"><a href="#JS中的NAN" class="headerlink" title="JS中的NAN"></a>JS中的NAN</h4><p>JavaScript中，NaN是一个特殊的数字值（typeof NaN的结果为number），是not a number的缩写，表示不是一个合法的数字。</p><ol><li>NAN的产生：</li></ol><p>一个无法被解析的数字</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//一个无法被解析的数字</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment">//NAN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">//NAN</span><span class="token comment">//与数字有关的失败的操作</span>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//NAN</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//NAN</span><span class="token comment">//运算符</span><span class="token constant">NAN</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">//NAN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>注意<br>NAN是唯一一个与自身不相等的值</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">NAN</span> <span class="token operator">===</span> <span class="token constant">NAN</span><span class="token punctuation">)</span> <span class="token comment">//NAN</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>辨别NAN</li></ol><p>使用函数isNaN()来判断一个数值是不是一个非数字<br>isNaN(NaN)<br>但是无法去辨别字符<br>isNaN(‘a’) //true</p><p>参考：《深入理解javascript》</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x错误 - Do not use built-in or reserved HTML elements as component id header</title>
      <link href="/posts/5fdefbba.html"/>
      <url>/posts/5fdefbba.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="vue2-x错误-Do-not-use-built-in-or-reserved-HTML-elements-as-component-id-header"><a href="#vue2-x错误-Do-not-use-built-in-or-reserved-HTML-elements-as-component-id-header" class="headerlink" title="vue2.x错误 - Do not use built-in or reserved HTML elements as component id: header"></a>vue2.x错误 - Do not use built-in or reserved HTML elements as component id: header</h4><p>原因：vue组件名称(属性)于HTML5标签名称冲突，注意vue组件命名不要与已有标签一直即可。</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
          <category> 配置篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6——``</title>
      <link href="/posts/619c24be.html"/>
      <url>/posts/619c24be.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="ES6中的"><a href="#ES6中的" class="headerlink" title="ES6中的``"></a>ES6中的``</h4><p>es6中允许使用 ``创建字符串模板,可以直接写回车空格编写html或文本</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;123&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在字符串拼接中可以代替’’以及””，直接拼接</p><p>```javascript<br>let a = ‘小王’<br>console.log(<code>我是${a}</code>)</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
          <category> 配置篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>input值变化，延时触发事件(防抖，节流)</title>
      <link href="/posts/eb5c39a4.html"/>
      <url>/posts/eb5c39a4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="input值变化，延时触发事件-防抖，节流"><a href="#input值变化，延时触发事件-防抖，节流" class="headerlink" title="input值变化，延时触发事件(防抖，节流)"></a>input值变化，延时触发事件(防抖，节流)</h4><ol><li>debounce防抖</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>         timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 防抖函数</span><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>throttle节流</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> timeout<span class="token punctuation">,</span>startTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>         args <span class="token operator">=</span> arguments<span class="token punctuation">,</span>         curTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 如果达到了规定的触发时间间隔，触发 handler</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>curTime <span class="token operator">-</span> startTime <span class="token operator">&gt;=</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>           startTime <span class="token operator">=</span> curTime<span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token comment">// 没达到触发间隔，重新设定定时器</span>           timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 节流函数</span><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文地址：<a href="https://www.cnblogs.com/ImmortalWang/p/11551159.html">https://www.cnblogs.com/ImmortalWang/p/11551159.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
          <category> 配置篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window.location.href的用法(动态输出跳转)</title>
      <link href="/posts/3f877806.html"/>
      <url>/posts/3f877806.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="window-location-href的用法-动态输出跳转"><a href="#window-location-href的用法-动态输出跳转" class="headerlink" title="window.location.href的用法(动态输出跳转)"></a>window.location.href的用法(动态输出跳转)</h4><p>javascript中的location.href有很多种用法，主要如下。</p><p>self.location.href=”/url” 当前页面打开URL页面<br>location.href=”/url” 当前页面打开URL页面<br>windows.location.href=”/url” 当前页面打开URL页面，前面三个用法相同。<br>this.location.href=”/url” 当前页面打开URL页面<br>parent.location.href=”/url” 在父页面打开新页面<br>top.location.href=”/url” 在顶层页面打开新页面</p><p>如果页面中自定义了frame，那么可将parent self top换为自定义frame的名称,效果是在frame窗口打开url地址</p><p>此外，window.location.href=window.location.href;和window.location.Reload()和都是刷新当前页面。区别在于是否有提交数据。当有提交数据时，window.location.Reload()会提示是否提交，window.location.href=window.location.href;则是向指定的url提交数据</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue package.json项目名 只能设置小写 办法</title>
      <link href="/posts/d22e9114.html"/>
      <url>/posts/d22e9114.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="vue-package-json项目名"><a href="#vue-package-json项目名" class="headerlink" title="vue package.json项目名"></a>vue package.json项目名</h4><p>npm显示仅仅为英文无法设置中文<br>修改dist打包目录后的 index.html的  <title>所需标题</title></p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
          <category> 配置篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue打开PDF文件</title>
      <link href="/posts/7a7b5251.html"/>
      <url>/posts/7a7b5251.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Vue打开PDF文件"><a href="#Vue打开PDF文件" class="headerlink" title="Vue打开PDF文件"></a>Vue打开PDF文件</h4><p>最简单的方式就是新建标签页打开</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现意外的服务器相应问题<br>原因有：</p><ol><li><p>不能在本地对.pdf进行打开，比如从地址http:localhost 打开就不可以</p></li><li><p>所请求的pdf文件的路径未设置跨域</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端post请求get请求内--body和query传参的区别</title>
      <link href="/posts/14572447.html"/>
      <url>/posts/14572447.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前端post请求get请求内–body和query传参的区别"><a href="#前端post请求get请求内–body和query传参的区别" class="headerlink" title="前端post请求get请求内–body和query传参的区别"></a>前端post请求get请求内–body和query传参的区别</h4><ol><li>get请求只能query传参</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">axios.get('/user', {params: {name:data}}).then().catch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>post可以传body和query两种形式的参数<br>```vue<br>axios.({<br> method:’post’,<br> url:’/user’,<br> data: {<pre><code> name: data</code></pre> }<br>})</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> elementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element-UI中表格组件的table slot用法</title>
      <link href="/posts/2ae6ef4e.html"/>
      <url>/posts/2ae6ef4e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Element-UI中表格组件的table-slot用法"><a href="#Element-UI中表格组件的table-slot用法" class="headerlink" title="Element-UI中表格组件的table slot用法"></a>Element-UI中表格组件的table slot用法</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-table-column    type="index"    :index="1"    label='序号'    width='100'&gt;&lt;/el-table-column&gt;&lt;div slot="append" style="text-align: center"&gt;    &lt;!--在此处添加你想要插入在表格最后一行的内容--&gt;123&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> elementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui 的 el-table 上使用无限滚动加载（与自带的 infinite-scroll 结合）</title>
      <link href="/posts/7c2421e7.html"/>
      <url>/posts/7c2421e7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="element-ui-的-el-table-上使用无限滚动加载（与自带的-infinite-scroll-结合）"><a href="#element-ui-的-el-table-上使用无限滚动加载（与自带的-infinite-scroll-结合）" class="headerlink" title="element-ui 的 el-table 上使用无限滚动加载（与自带的 infinite-scroll 结合）"></a>element-ui 的 el-table 上使用无限滚动加载（与自带的 infinite-scroll 结合）</h4><p>依赖于element-UI<br>安装</p><pre class="line-numbers language-npm" data-language="npm"><code class="language-npm">npm install --save el-table-infinite-scroll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全局引入</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import Vue from 'vue'import elTableInfiniteScroll from 'el-table-infinite-scroll'Vue.use(elTableInfiniteScroll)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>局部引入</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;import elTableInfiniteScroll from 'el-table-infinite-scroll';export default {  directives: {    'el-table-infinite-scroll': elTableInfiniteScroll  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件中使用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;el-table    border    height="400px"    v-el-table-infinite-scroll="load"    :data="tableData"  &gt;    &lt;el-table-column prop="date" label="日期" width="180"&gt; &lt;/el-table-column&gt;    &lt;el-table-column prop="name" label="姓名" width="180"&gt; &lt;/el-table-column&gt;    &lt;el-table-column prop="address" label="地址"&gt; &lt;/el-table-column&gt;  &lt;/el-table&gt;&lt;/template&gt;&lt;script&gt;import elTableInfiniteScroll from 'el-table-infinite-scroll';const exampleData = new Array(10).fill({  date: '2016-05-02',  name: '王小虎',  address: '上海市普陀区金沙江路 1518 弄'});export default {  directives: {    'el-table-infinite-scroll': elTableInfiniteScroll  },  data() {    return {      tableData: exampleData    };  },  methods: {    load() {      this.$message.success('加载下一页');      this.tableData = this.tableData.concat(exampleData);    }  }};&lt;/script&gt;&lt;style scoped&gt;.el-table {  width: 100%;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文链接：<a href="https://blog.csdn.net/baidu_27769027/article/details/101924676">https://blog.csdn.net/baidu_27769027/article/details/101924676</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> elementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Duplicate keys detected &#39;0&#39; This may cause an update error.</title>
      <link href="/posts/959dcd6.html"/>
      <url>/posts/959dcd6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Duplicate-keys-detected-‘0’-This-may-cause-an-update-error"><a href="#Duplicate-keys-detected-‘0’-This-may-cause-an-update-error" class="headerlink" title="Duplicate keys detected: ‘0’. This may cause an update error."></a>Duplicate keys detected: ‘0’. This may cause an update error.</h4><p>原因：<br>一个template中有两个一样的v-for<br>解决方法<br>将两个中的一个的key修改一下即可解决问题</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决el-image出现本地图片加载失败问题</title>
      <link href="/posts/5b605baa.html"/>
      <url>/posts/5b605baa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="解决el-image出现本地图片加载失败问题"><a href="#解决el-image出现本地图片加载失败问题" class="headerlink" title="解决el-image出现本地图片加载失败问题"></a>解决el-image出现本地图片加载失败问题</h4><p>原因<br>在element ui 组件上使用相对路径，webpack并不会对路径进行处理（即为根目录下的images）。<br>解决<br>图片地址用 require 进行拉取。<br>例如：<br>:src=“require(’…/assets/login/title-picture.png’)”</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-image :src="require('路径')" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原文链接：<a href="https://blog.csdn.net/jinzai9976/article/details/115364626">https://blog.csdn.net/jinzai9976/article/details/115364626</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决el-image出现网络图片加载失败问题</title>
      <link href="/posts/185c84b9.html"/>
      <url>/posts/185c84b9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="解决el-image出现网络图片加载失败问题"><a href="#解决el-image出现网络图片加载失败问题" class="headerlink" title="解决el-image出现网络图片加载失败问题"></a>解决el-image出现网络图片加载失败问题</h4><p>图片是api接口返回的网络图片，请求是异步的，在没回来之前图片是undefined，所有在回来前使用v-if，在回来后在渲染，或者使用vue自带的this.$forceUpdate()来刷新数据</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-image v-if="list.cover !== undefined" :src="list.cover" fit="fill" lazy&gt;&lt;/el-image&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elementui中el-button点击后按钮颜色不变</title>
      <link href="/posts/4394d381.html"/>
      <url>/posts/4394d381.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="elementui中el-button点击后按钮颜色不变"><a href="#elementui中el-button点击后按钮颜色不变" class="headerlink" title="elementui中el-button点击后按钮颜色不变"></a>elementui中el-button点击后按钮颜色不变</h4><p>使用el-button在点击选中后颜色变为选中的颜色，但此时点击屏幕任意部分此按钮的颜色都会变回原样，只能通过动态绑定的class来改变颜色达到颜色不变的情况</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-button :class="this.flag === 1?'product-select':'product'" @click="onShow(1)"&gt;    &lt;div class="msg"&gt;内容    &lt;/div&gt;&lt;/el-button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态绑定后每次选中颜色即可不变，点击屏幕也不会变回原样</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机页面监听搜索按键方法</title>
      <link href="/posts/412eb8be.html"/>
      <url>/posts/412eb8be.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="手机页面监听搜索按键方法"><a href="#手机页面监听搜索按键方法" class="headerlink" title="手机页面监听搜索按键方法"></a>手机页面监听搜索按键方法</h4><p>如果搜索框是input标签，只需要把type设置为search即可，右侧还内置一个清除按键，此时弹出的手机键盘回车键也变成了搜索或者搜索的图标</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input type="search" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取键盘搜索事件</p><p>```javascript<br>//获取键盘搜索事件<br>    var keycode = e.keyCode<br>    var searchValue = $(this).val()<br>    //回车的键盘值是13<br>    if (keycode == ‘13’) {<br>        //搜索业务逻辑<br>    }</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 后台传过来的是带样式的数据</title>
      <link href="/posts/bd1dc7b7.html"/>
      <url>/posts/bd1dc7b7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="后台传过来的是带样式的数据"><a href="#后台传过来的是带样式的数据" class="headerlink" title="后台传过来的是带样式的数据"></a>后台传过来的是带样式的数据</h4><ol><li>对于vue来说很简单，只需要在标签内加入v-html即可</li><li>其他：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> 内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若需要修改传回的样式内容，可以使用伪选择器进行匹配选择</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 监听键盘回车事件 @keyup.enter || @keyup.enter.native</title>
      <link href="/posts/f9141d47.html"/>
      <url>/posts/f9141d47.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="vue-监听键盘回车事件-keyup-enter-keyup-enter-native"><a href="#vue-监听键盘回车事件-keyup-enter-keyup-enter-native" class="headerlink" title="vue 监听键盘回车事件 @keyup.enter || @keyup.enter.native"></a>vue 监听键盘回车事件 @keyup.enter || @keyup.enter.native</h4><p>在使用一些经过封装过后的组件的时候，需要加.native表示使用原生的keyup或其他方法，只需要在后面更上需要的别名即可</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input @keyup.enter="search" /&gt;&lt;el-input @keyup.native.enter="search" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>全部键盘别名<br>.enter<br>.tab<br>.esc<br>.space<br>.up<br>.down<br>.left<br>.right<br>.delete<br>.ctrl<br>.alt<br>.shift<br>.meta(windows系统下是win键，mac下是command键)<br>alt+c则是@keyup.alt.67<br>ctrl+click则是@click.ctrl</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端测试网页时，右边有留白</title>
      <link href="/posts/8399d5da.html"/>
      <url>/posts/8399d5da.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="移动端测试网页时，右边有留白"><a href="#移动端测试网页时，右边有留白" class="headerlink" title="移动端测试网页时，右边有留白"></a>移动端测试网页时，右边有留白</h4><p>可能是由于有元素宽度超出屏幕宽度<br>解决：设置html的width:100%，再设置水平方向隐藏超出overflow-x:hidden;<br>一般最外层标签宽度最好使用百分比来确定，否则容易出现超出白边</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js修改css样式</title>
      <link href="/posts/e37bca25.html"/>
      <url>/posts/e37bca25.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="js修改css样式"><a href="#js修改css样式" class="headerlink" title="js修改css样式"></a>js修改css样式</h4><ol><li>直接设置style的属性，某些情况使用这个设置！important值无效<br>如果属性有’-‘号，就写成驼峰形式，如果想保留-号，就中括号形式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'10px'</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>直接设置属性(只能用于某些属性，相关样式会自动识别)<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'100px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>设置style的属性<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'height: 100px !important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用setProperty 如果要设置!important，推荐用这种方法设置第三个参数</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'300px'</span><span class="token punctuation">,</span> <span class="token string">'important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>改变class 比如JQ的更改class相关方法<br>因JS获取不到css的伪元素，所以可以通过改变伪元素父级的class来动态更改伪元素的样式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">'blue fb'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>设置cssText</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">'height: 100px !important'</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">+=</span> <span class="token string">'height: 100px !important'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>创建引入新的css样式文件</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addNewStyle</span><span class="token punctuation">(</span><span class="token parameter">newStyle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> styleElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'styles_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>styleElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                styleElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                styleElement<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/css'</span><span class="token punctuation">;</span>                styleElement<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'styles_js'</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleElement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        styleElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>newStyle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">addNewStyle</span><span class="token punctuation">(</span><span class="token string">'.box {height: 100px !important;}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>使用addRule、insertRule</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在原有样式操作</span>        document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token string">'height: 100px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span><span class="token string">'.box {height: 100px}'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 或者插入新样式时操作</span>        <span class="token keyword">var</span> styleEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            styleSheet <span class="token operator">=</span> styleEl<span class="token punctuation">.</span>sheet<span class="token punctuation">;</span>        styleSheet<span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token string">'height: 100px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        styleSheet<span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span><span class="token string">'.box {height: 100px}'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleEl<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转载自作者：静默虚空<br>原文链接：<a href="https://www.cnblogs.com/yaomumu/p/12759060.html">https://www.cnblogs.com/yaomumu/p/12759060.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目打包发布到服务器，以及空白页或图片不显示问题</title>
      <link href="/posts/e8a8a893.html"/>
      <url>/posts/e8a8a893.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Vue项目打包发布到服务器，以及空白页或图片不显示问题"><a href="#Vue项目打包发布到服务器，以及空白页或图片不显示问题" class="headerlink" title="Vue项目打包发布到服务器，以及空白页或图片不显示问题"></a>Vue项目打包发布到服务器，以及空白页或图片不显示问题</h4><p>Vue项目完成后，需要打包上线。打包只需要执行命令npm run build即可，但有两点需要注意的地方，否则就会出现空白页或图片不显示问题。</p><ol><li>修改路径位置，解决空白页问题</li></ol><p>修改位于项目目录中的config/index.js，将assetsPublicPath: ‘/‘修改为assetsPublicPath: ‘./‘</p><ol start="2"><li>解决背景图片不显示问题</li></ol><p>打包后的css文件夹内app.css文件访问static/img/’图片名’，路径错误访问不到图片。</p><p>修改位于项目目录中的build文件夹/utils.js，添加上publicPath:’../../‘，或者死图片使用require导入</p>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一则“HTTP 405 Method Not Allowed”的解决办法</title>
      <link href="/posts/792a2eb8.html"/>
      <url>/posts/792a2eb8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="提示“HTTP-405”错误——“Method-Not-Allowed”。"><a href="#提示“HTTP-405”错误——“Method-Not-Allowed”。" class="headerlink" title="提示“HTTP 405”错误——“Method Not Allowed”。"></a>提示“HTTP 405”错误——“Method Not Allowed”。</h4><p>从字面上的意思理解，很显然是提交方法的类型错误，要么是以GET方式向POST接口提交数据，要么是POST方式项GET接口提交数据，但反反复复检查了后端接口与提交方式，都是POST，完全没有问题。<br>仔细检查前端代码，发现编写方式如下:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">,</span>      <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">,</span>      <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input3<span class="token punctuation">,</span>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input4    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时会有两个编程问题</p><ol><li>提交的参数暴露在外</li><li>默认提交的Header参数”content-type”为”application/json”</li></ol><p>可以新增content-type的头部属性来解决</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">,</span>      <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">,</span>      <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input3<span class="token punctuation">,</span>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input4    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">heads</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要解决第一个暴露问题，只需要引入$httpParamSerializer服务即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token function">$httpParamSerializer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">,</span>      <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">,</span>      <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input3<span class="token punctuation">,</span>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input4    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">heads</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue获取DOM元素并设置属性</title>
      <link href="/posts/c1bdb0a4.html"/>
      <url>/posts/c1bdb0a4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="vue获取DOM元素并设置属性"><a href="#vue获取DOM元素并设置属性" class="headerlink" title="vue获取DOM元素并设置属性"></a>vue获取DOM元素并设置属性</h4><p>方法1：<br>直接给相应的元素加id，然后使用document.getElementById(‘id’);来获取，然后设置相应属性或样式<br>方法2：<br>使用ref，给相应的元素加ref=”name”，然后再this.$refs.name获取到该元素，并且可以直接调用子组件中定义的方法</p><p>注意：</p><ol><li>在获取相应元素之前，必须在mounted生命周期中进行挂在，否则会获取null值</li><li>如果给子组件加id并修改自定义属性，则会直接加到子组件外层的div伤，不会改变内部</li><li>给子组件加ref，然后获取到DOM元素之后改变相应的自定义属性的值，vue会报错</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决头部使用 positionfixed； 固定定位后遮住下方内容的问题</title>
      <link href="/posts/1fec658d.html"/>
      <url>/posts/1fec658d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="今天在做一个页面的时候，有一个效果是要让头部固定，但是在给了position-fixed-后，继续往下写会发现下方内容有部分被头部遮住了，有两个办法可以解决这种问题"><a href="#今天在做一个页面的时候，有一个效果是要让头部固定，但是在给了position-fixed-后，继续往下写会发现下方内容有部分被头部遮住了，有两个办法可以解决这种问题" class="headerlink" title="今天在做一个页面的时候，有一个效果是要让头部固定，但是在给了position:fixed; 后，继续往下写会发现下方内容有部分被头部遮住了，有两个办法可以解决这种问题"></a>今天在做一个页面的时候，有一个效果是要让头部固定，但是在给了position:fixed; 后，继续往下写会发现下方内容有部分被头部遮住了，有两个办法可以解决这种问题</h4><ol><li>在头部下方给一个空的div，高度为设置position:fixed的标签的高度</li><li>把整个要使用postion:fixed的盒子用另一个盒子包起来<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div class="bottom"&gt;&lt;h1&gt;123&lt;/h1&gt;&lt;/div&gt;&lt;style&gt;.bottom{width:100%;height:20px;position:fixed;bottom:0;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这样就设置了一个永远在底部的div，但是会发现页面拉到底部后会遮挡一部分内容，只需要在设置一个等高的盒子包裹起来就可以了<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div class="box"&gt;&lt;div class="bottom"&gt;&lt;h1&gt;123&lt;/h1&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;.bottom{width:100%;height:20px;position:fixed;bottom:0;}.box{height:20px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中computed计算属性传入参数</title>
      <link href="/posts/5c8dfd6e.html"/>
      <url>/posts/5c8dfd6e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="vue中computed计算属性传入参数"><a href="#vue中computed计算属性传入参数" class="headerlink" title="vue中computed计算属性传入参数"></a>vue中computed计算属性传入参数</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div :age="getAge(10)"&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;computed:{getAge(){return age =&gt; {console.log(age)return age}}}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何隐藏overflow scroll的滚动条，但是滚动功能还在(保留滚动功能)</title>
      <link href="/posts/d954a198.html"/>
      <url>/posts/d954a198.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="如何隐藏overflow-scroll的滚动条，但是滚动功能还在-保留滚动功能"><a href="#如何隐藏overflow-scroll的滚动条，但是滚动功能还在-保留滚动功能" class="headerlink" title="如何隐藏overflow: scroll的滚动条，但是滚动功能还在(保留滚动功能)"></a>如何隐藏overflow: scroll的滚动条，但是滚动功能还在(保留滚动功能)</h4><ol><li>适用于chrome</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>为了兼容其他浏览器，可以在滚动区域外再嵌套一层div，给div设置overflow:hidden，即可隐藏滚动条<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.scroll</span><span class="token punctuation">{</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token selector">.scrollChild</span><span class="token punctuation">{</span><span class="token property">overflow</span><span class="token punctuation">:</span>scroll<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>以上方法若是还不能解决，就手动给标签层设置一个padding-bottom，把滚动条挤出可视范围<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.scrollChild</span><span class="token punctuation">{</span><span class="token property">overflow</span><span class="token punctuation">:</span>scroll<span class="token punctuation">;</span><span class="token property">overflow-y</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">padding-bottom</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 配置篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWA</title>
      <link href="/posts/67dc4d37.html"/>
      <url>/posts/67dc4d37.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><p>全称是Progressive Web App</p><h3 id="PWA组成"><a href="#PWA组成" class="headerlink" title="PWA组成"></a>PWA组成</h3><ol><li>Service Worker</li><li>Promise</li><li>fetch</li><li>cache API</li><li>Notification API</li></ol><h4 id="Service-Worker-最重要"><a href="#Service-Worker-最重要" class="headerlink" title="Service Worker(最重要)"></a>Service Worker(最重要)</h4><p>服务工作线程<br>  常驻内存运行<br>  代理网络请求<br>  依赖HTTPS<br>需要先进行service worker的注册<br>navigator.serviceWorker.register(‘./sw.js’,{<br>  scope: ‘/‘<br>}).then(registration =&gt; {<br>  console.log(registration)<br>}, error =&gt; {<br>  console.error(error)<br>})<br>在sw.js中进行service worker的操作</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>承诺  控制流<br>  优雅的解决并优化回调地狱问题<br>  async/await语法同步化<br>  service wroker 的API风格</p><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><p>网络请求<br>  比XMLHttpRequest更简介<br>  Promise的风格特点<br>  依旧存在不足</p><h4 id="cache-API"><a href="#cache-API" class="headerlink" title="cache API"></a>cache API</h4><p>支持资源的缓存系统<br>  缓存资源(css/scripts/image)<br>  依赖Service Worker 代理网络请求<br>  支持离线程序运行</p><h4 id="Notification-API"><a href="#Notification-API" class="headerlink" title="Notification API"></a>Notification API</h4><p>消息推送<br>  依赖用户授权<br>  适合在Service Worker中推送</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>已拦截跨源请求：同源策略禁止读取位于 &#39;http//请求地址schoolUser/getTelecomNetWorkNumber&#39; 的远程资源</title>
      <link href="/posts/2f4a60c0.html"/>
      <url>/posts/2f4a60c0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="已拦截跨源请求：同源策略禁止读取位于-http-请求地址schoolUser-getTelecomNetWorkNumber-的远程资源"><a href="#已拦截跨源请求：同源策略禁止读取位于-http-请求地址schoolUser-getTelecomNetWorkNumber-的远程资源" class="headerlink" title="已拦截跨源请求：同源策略禁止读取位于 http://请求地址schoolUser/getTelecomNetWorkNumber 的远程资源"></a>已拦截跨源请求：同源策略禁止读取位于 http://请求地址schoolUser/getTelecomNetWorkNumber 的远程资源</h3><h4 id="已拦截跨源请求：同源策略禁止读取位于-http-请求地址-8081-schoolUser-getTelecomNetWorkNumber-的远程资源。如何解决。"><a href="#已拦截跨源请求：同源策略禁止读取位于-http-请求地址-8081-schoolUser-getTelecomNetWorkNumber-的远程资源。如何解决。" class="headerlink" title="已拦截跨源请求：同源策略禁止读取位于 http://请求地址:8081/schoolUser/getTelecomNetWorkNumber 的远程资源。如何解决。"></a>已拦截跨源请求：同源策略禁止读取位于 http://请求地址:8081/schoolUser/getTelecomNetWorkNumber 的远程资源。如何解决。</h4><p>这种跨源请求禁止读取的原因是：CORS 头缺少 ‘Access-Control-Allow-Origin’，所以在要请求的接口上加上</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//解决跨域请求问题response.setHeader("Access-Control-Allow-Origin","*");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>问题解决</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vant完成下拉选择</title>
      <link href="/posts/43fee1dd.html"/>
      <url>/posts/43fee1dd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用vant完成一个下拉选择按钮完成筛选的组件"><a href="#使用vant完成一个下拉选择按钮完成筛选的组件" class="headerlink" title="使用vant完成一个下拉选择按钮完成筛选的组件"></a>使用vant完成一个下拉选择按钮完成筛选的组件</h3><p>完成效果<br><a href="https://imgtu.com/i/TuQ76O"><img src="https://s4.ax1x.com/2021/12/20/TuQ76O.png" alt="TuQ76O.png"></a><br>思路比较简单，先使用vant组件中的下拉，再搭配cell完成每一块的构建</p><p><a href="https://imgtu.com/i/Tul9c8"><img src="https://s4.ax1x.com/2021/12/20/Tul9c8.png" alt="Tul9c8.png"></a><br>通过动态判断点击哪一个按钮来绑定被点击的按钮的样式，这样就能简单的知道点击了哪一个按钮</p><p><a href="https://imgtu.com/i/Tul8E9"><img src="https://s4.ax1x.com/2021/12/20/Tul8E9.png" alt="Tul8E9.png"></a><br>再通过一组绑定同一个数据value1，这样便能达到选择一个的目的，通过selectOne方法来选择传入的值来动态改变value绑定的值<br>再搭配switch来选择每一个值的方法，例如我在上面费用情况，也就是第一组按钮中分别给不限、免费、收费绑定了0，1，2的值，在通过switch case来看选择了哪个值，然后来筛选对应的内容<br><a href="https://imgtu.com/i/Tu1P8x"><img src="https://s4.ax1x.com/2021/12/20/Tu1P8x.png" alt="Tu1P8x.png"></a></p><p>这样就完成了一个简易的下拉筛选框，虽然比较简陋，可能性能也不是很好，但也是完成了内容了~</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue父组件监听子组件的生命周期</title>
      <link href="/posts/8217f149.html"/>
      <url>/posts/8217f149.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue父组件监听子组件的生命周期"><a href="#vue父组件监听子组件的生命周期" class="headerlink" title="vue父组件监听子组件的生命周期"></a>vue父组件监听子组件的生命周期</h3><ol><li>通过$emit实现</li></ol><p>以mounted为例，在父组件Parent和子组件Child中，如果父组件监听到子组件挂载mounted就做一些逻辑处理，可以通过$emit来实现<br>Parent.vue</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Child @mounted <span class="token operator">=</span> <span class="token string">"toDoSomething"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Child.vue</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"mounted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是也有他的不足，那就是每次都需要手动写一次 $emit 触发父组件的事件<br>而通过hook来监听生命周期则会更加方便简单</p><ol start="2"><li>通过@hook实现</li></ol><p>Parent.vue</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Child @hook<span class="token operator">:</span>mounted <span class="token operator">=</span> <span class="token string">"toDoSomething"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token function">toDoSomething</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Parent component listens to child component...'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Child.vue</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'child trigger hook...'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出顺序为：<br>child trigger hook…<br>Parent component listens to child component…<br>子组件先执行被监听的生命周期的钩子函数，然后父组件执行监听到的钩子函数的方法</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router使用query失效</title>
      <link href="/posts/11b3fa24.html"/>
      <url>/posts/11b3fa24.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue-router传参使用query失效"><a href="#vue-router传参使用query失效" class="headerlink" title="vue-router传参使用query失效"></a>vue-router传参使用query失效</h3><p>vue在使用query传参后，第一次跳转数据是没问题的，但第二次刷新页面数据会变为[object object]，以下是解决方法之一。</p><ol><li>要跳转的传参页先将数组转换为字符串</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li v-for=" ( list,index ) in indexcurr['curr'] " :key="index"&gt;&lt;router-link :to="{ path: '/detail',             query: { id: JSON.stringify( list ),                  item: JSON.stringify( indexcurr ) }}"&gt;&lt;/router-link&gt;&lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接收页面将字符串转为对象</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">created () {  let obj1 = eval( '(' + this.$route.query.id + ')' ) let obj2 = eval( '(' + this.$route.query.item + ')' )},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样就解决问题了，不要直接传数组与对象</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue强制刷新某组件(销毁重置)</title>
      <link href="/posts/10c30ac1.html"/>
      <url>/posts/10c30ac1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue强制刷新某组件-销毁重置"><a href="#vue强制刷新某组件-销毁重置" class="headerlink" title="vue强制刷新某组件(销毁重置)"></a>vue强制刷新某组件(销毁重置)</h3><p>在需要强制刷新的组件中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">v<span class="token operator">-</span><span class="token keyword">if</span> <span class="token operator">=</span> <span class="token string">" hackReset "</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>触发事件执行下面的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>hackReset <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hackReset <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router传递参数的几种方式</title>
      <link href="/posts/abc4aca3.html"/>
      <url>/posts/abc4aca3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue-router传参"><a href="#vue-router传参" class="headerlink" title="vue-router传参"></a>vue-router传参</h3><p>  vue-router传递参数可以分为<br>  -[1] 编程式导航，route.push这种js中的跳转<br>  -[2] 声明式导航，router-link 这种标签跳转</p><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p>  router.push传递的参数有两种：String字符串和Object对象</p><h4 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1. 字符串"></a>1. 字符串</h4><p>  直接将跳转的路由的地址写入即可，但是无法传递参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">this.$router.push('地址')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-对象"><a href="#2-对象" class="headerlink" title="2. 对象"></a>2. 对象</h4><p>  分为两种：命名路由和查询参数</p><h5 id="2-1-命名路由"><a href="#2-1-命名路由" class="headerlink" title="2.1 命名路由"></a>2.1 命名路由</h5><p>命名路由的前提是在注册路由的地方给需要的路由命名name<br><a href="https://imgtu.com/i/Tue5fU"><img src="https://s4.ax1x.com/2021/12/20/Tue5fU.png" alt="Tue5fU.png"></a><br>在其中对路由使用name属性<br>命名路由传递参数需要使用params来传递，这里一定要注意使用params不是query。目标 页面接收传递参数时使用params<br>注意使用params这种方式传递参数在刷新页面后传递的值会失效<br>使用方法</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">this.$router.push({//name中填写自己的命名即可    name: 'companyEdit',    params:{      Id: 123    }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要取值的地方使用取值即可</p><h5 id="2-2-查询参数"><a href="#2-2-查询参数" class="headerlink" title="2.2 查询参数"></a>2.2 查询参数</h5><p>查询参数其实就是在路由地址后面带上参数和传统的url参数一致的，传递参数使用query而且必须配合path来传递参数而不能用name，目标页面接收传递的参数使用query。<br>查询参数使用的是query传递参数，切记name和params是一对，path和query是一对<br>使用方法</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">this.$router.push({//path填写自己的路径url即可    path: '/company/Edit',    query:{      Id: 123    }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要取值的地方使用取值即可</p><h3 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h3><p>声明式导航和编程式导航的使用大同小异,只不过使用标签包裹罢了<br>第一种：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to='company'&gt;跳转至/company&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link               :to="{                 name: 'companyEdit',                 params: { Id: 123 }              }"&gt;       跳转至name为companyEdit的路由&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三种：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link               :to="{                 path: '/company/Edit',                 query: { Id: 123 }              }"&gt;       跳转至name为companyEdit的路由&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.命名路由搭配params，刷新页面参数会丢失<br>2.查询参数搭配query，刷新页面数据不会丢失<br>3.接受参数使用this.$route后面就是搭配路由的名称就能获取到参数的值<br>4.注意使用跳转的时候是$router，接收参数的时候是$route，千万不要写错</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决vue 子组件修改父组件传来的props值报错问题</title>
      <link href="/posts/34e4f0a2.html"/>
      <url>/posts/34e4f0a2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="解决vue-子组件修改父组件传来的props值报错问题"><a href="#解决vue-子组件修改父组件传来的props值报错问题" class="headerlink" title="解决vue 子组件修改父组件传来的props值报错问题"></a>解决vue 子组件修改父组件传来的props值报错问题</h3><p>首先要说明的一点便是，vue不推荐直接在子组件中修改父组件传来的props的值，会报错</p><p>[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “result” (found in component )</p><p>可以做一点变通，在子组件的data中在定义一个值来接收props，这样便不会报错了，如果需要改值得话还是通过父组件来改变而非子组件或者运用子向父传值得办法来改变</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router获取meta</title>
      <link href="/posts/310d1d65.html"/>
      <url>/posts/310d1d65.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue-router获取meta"><a href="#vue-router获取meta" class="headerlink" title="vue-router获取meta"></a>vue-router获取meta</h3><p>实习的时候遇到一个问题，在某个面包屑中动态切换值，显示添加与查看</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">{  path: 'list',  components: () =&gt; import ( '@components/list' ),  meta: {   ListName: 'add'  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始想着meta和prop一样可以传入route的参数，结果踩了一天雷<br>后来想出两种办法<br>第一种:配置两个路由，使用同一个组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">{  path: 'list',  components: () =&gt; import ( '@components/list/a' ),  meta: {   ListName: 'add'  }}{  path: 'list',  components: () =&gt; import ( '@components/list/a' ),  meta: {   ListName: 'edit'  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是觉得太麻烦，便动态根据条件使用三目运算符来直接赋值标题了</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">{{  this.$route.query.id  ?  'add'  :  'edit'  }}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>暂时就这样处理吧~</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序无法播放本地视频</title>
      <link href="/posts/f153a0d6.html"/>
      <url>/posts/f153a0d6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="小程序无法播放本地视频"><a href="#小程序无法播放本地视频" class="headerlink" title="小程序无法播放本地视频"></a>小程序无法播放本地视频</h3><ol><li>小程序最好使用网络视频而非本地视频，否则会出现视频无法播放得问题</li><li>小程序中得video组件是原生组件，src属性默认支持mp4格式，实际上还可以支持其他格式</li></ol><p>src: 要播放得视频得资源地址<br>initial-time: 指定视频初始播放位置<br>danmu-list: 弹幕列表<br>controls: 是否显示默认播放控件(播放/暂停按钮、播放进度、事件)<br>binderror: 视频播放出错时候得触发</p><ol start="3"><li>使用wx.getSystemInfo获取系统信息</li></ol><p>参数主要有<br>brand: 手机品牌<br>model: 手机型号<br>fontSizeSetting: 用户字体大小设置<br>pixelRatio: 设备像素比</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态控制disabled</title>
      <link href="/posts/7e9234b3.html"/>
      <url>/posts/7e9234b3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="动态控制disabled"><a href="#动态控制disabled" class="headerlink" title="动态控制disabled"></a>动态控制disabled</h3><p>可以先设置一个值，使用v-bind来将disabled的值绑定到某个data数据或者props中的数据，在想要改变禁用与否的地方添加方法，将值取反即可在禁用与非禁用之间反复横跳，我将其定义在了判断输入框是否为空，为空则无法点击</p><p>如图一所示，进行一个绑定，对input输入框运用onblur方法来判定是否为空，为空置值为true否则为false<br><a href="https://imgtu.com/i/omgz11"><img src="https://z3.ax1x.com/2021/11/27/omgz11.png" alt="omgz11.png"></a><br>方法如图二<br><a href="https://imgtu.com/i/om2CnK"><img src="https://z3.ax1x.com/2021/11/27/om2CnK.png" alt="om2CnK.png"></a><br>数据如图三<br><a href="https://imgtu.com/i/om2P0O"><img src="https://z3.ax1x.com/2021/11/27/om2P0O.png" alt="om2P0O.png"></a></p><p>这样就可以进行事件操作了<br>输入框为空则无法点击<br><a href="https://imgtu.com/i/om2MB8"><img src="https://z3.ax1x.com/2021/11/27/om2MB8.png" alt="om2MB8.png"></a><br>输入框有值则可以点击<br><a href="https://imgtu.com/i/om2J9s"><img src="https://z3.ax1x.com/2021/11/27/om2J9s.png" alt="om2J9s.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> JS </tag>
            
            <tag> ElementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的搜索框--elementUI</title>
      <link href="/posts/e08e7663.html"/>
      <url>/posts/e08e7663.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="实现搜索框"><a href="#实现搜索框" class="headerlink" title="实现搜索框"></a>实现搜索框</h3><p>可以先在本地定义一个数组，定义一个方法来遍历接收到的数据，筛选其中的字来匹配对应的内容，筛选出来后放到本地的数组中并将其显示出来，在页面跳转后或者刷新的时候要将数组清空，否则可能会影响到其他页面的内容</p><div class="box">            <el-input class="search" placeholder="请输入检索内容" prefix-icon="el-icon-search" autofocus="true" v-model="inputValue" type="search" @click.native="exit" @input="searchAction($event)">      </el-input>      <div class="text" @click="back">取消</div>    </div>    <!-- 条件判断显示为空还是显示提示栏 -->    <div>      <!-- inputValue长度为0的时候隐藏 -->      <div v-if="inputValue.length != 0" style="margin-top:3.5rem">        <el-card class="box-card" v-show="isShow" shadow="never">          <div v-for="(item, i) of searchResult">                <div @click="change(item)" class="box_line">              { item.product.title || item.news.title }            </div>          </div>        </el-card>然后是定义的方法，searchAction中来从获取到的数据中遍历得到的数据并存放在自己定义的数组中，exit中定义的是清空数组，我为了方便便将exit事件放到了再次点击输入框进行了绑定            //   获取e，通过target.value获取值            searchAction(e) {              let inputValue = e              //   给空数组searchResult赋值              this.searchResult =                 this.courseData.filter((item) =&gt; {                if (                  item.product.title.includes(inputValue) ||                  item.news.title.includes(inputValue)                ) {                  return item                }              })            },            exit(){              this.searchResult = [];              this.isShow = true;              this.count1 = 0;              this.count2 = 0            },[![omcDqU.png](https://z3.ax1x.com/2021/11/27/omcDqU.png)](https://imgtu.com/i/omcDqU)这样便能显示出对应的遍历后的数据了</div></div>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> JS </tag>
            
            <tag> ElementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的for循环一行两列</title>
      <link href="/posts/8370a851.html"/>
      <url>/posts/8370a851.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在使用vue的过程中，发现v-for这个指令渲染页面非常好用，但是循环的都是在一列上，显示效果很差，所以做成一行两列，实现办法只需要在一个循环体里面放置两个同样的格式，并且判断该循环的索引值和数组长度进行比较即可<br>    <!-- 两行显示，，每一个有一段文字描述和一个视频，暂时图片代替 --><br>    </p><div v-for="(list,i) in lists" class="list" v-if="i%2 == 0"><br>            <!-- 列的第一个 --><br>        <div class="box1"><br>            <div class="text"><br>                {list.name}<br>            </div><br>        </div><br>        <!-- 列的第二个 --><br>        <div class="box2" v-if="i+1<lists.length"><br>            <div class="text"><br>                {lists[i+1].name}<br>            </div><br>        </div><br>    </div><br><a href="https://imgtu.com/i/omyteg"><img src="https://z3.ax1x.com/2021/11/27/omyteg.png" alt="omyteg.png"></a><p></p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue文字很多时使用...代替</title>
      <link href="/posts/45d3758.html"/>
      <url>/posts/45d3758.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue当文字很多的时候使用…代替"><a href="#vue当文字很多的时候使用…代替" class="headerlink" title="vue当文字很多的时候使用…代替"></a>vue当文字很多的时候使用…代替</h3><p>代码如下，加入对应部位即可<br>    .sub_title1{<br>        overflow: hidden;<br>        white-space: nowrap;<br>        text-overflow: ellipsis;<br>    }<br>修改后如图<br><a href="https://imgtu.com/i/oms3b4"><img src="https://z3.ax1x.com/2021/11/27/oms3b4.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-popover修改样式</title>
      <link href="/posts/d850b7be.html"/>
      <url>/posts/d850b7be.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="el-popover的样式的修改"><a href="#el-popover的样式的修改" class="headerlink" title="el-popover的样式的修改"></a>el-popover的样式的修改</h3><p>el-popover的class也是el-popover，他比较特别的是,el-popover生成的div不在当前组件之内，甚至不在App.vue组件的div内，他和App.vue组件的div平级，所以需要设置全局style。<br>当然也不能用穿透符，因为组件不在当前组件内，也就没有穿透这一说了<br><a href="https://imgtu.com/i/omry90"><img src="https://z3.ax1x.com/2021/11/27/omry90.png" alt="omry90.png"></a><br>不加scoped就是全局style啦<br>el-popover是和app是同级别的，弹窗属于全局样式，所以在scoped设置的样式是没有用的</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ElementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>已安装对应模块，但报无法找到模块“XXX”的声明文件的解决方案</title>
      <link href="/posts/8bcf08b0.html"/>
      <url>/posts/8bcf08b0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="已安装对应模块，但报无法找到模块“XXX”的声明文件的解决方案"><a href="#已安装对应模块，但报无法找到模块“XXX”的声明文件的解决方案" class="headerlink" title="已安装对应模块，但报无法找到模块“XXX”的声明文件的解决方案"></a>已安装对应模块，但报无法找到模块“XXX”的声明文件的解决方案</h3><p>做项目的时候，导入某些组件的时候如果其他文件中包含了这些组件，可能会报如下错<br><a href="https://imgtu.com/i/omDyOe"><img src="https://z3.ax1x.com/2021/11/27/omDyOe.png" alt="omDyOe.png"></a><br>可以直接在src文件目录下创建一个shime-vue.d.ts文件，在里面写入<br>    declare module ‘mint-ui’<br>保存后就可以正常引入对应的组件或模块了</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 配置篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目中的返回上一页</title>
      <link href="/posts/3a5c711.html"/>
      <url>/posts/3a5c711.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue项目中返回上一页"><a href="#vue项目中返回上一页" class="headerlink" title="vue项目中返回上一页"></a>vue项目中返回上一页</h3><p>  由于vue所生产的项目叫做SPA单页面应用，如果还是使用jQuery中的go(-1)或者back()是行不通的，所以我们用到了vue中的编程式导航</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>定义一个使用返回的按钮或者模块<br>    &lt;el-page-header<br>      @back=”goBack”<br>      title=””<br>      v-bind:content=”$route.name”<br>      class=”page_header”<br>        &gt;<br>    <br>在methods中定义该goBack方法<br>    methods: {<br>      goBack() {<br>        if (window.history.length &lt;= 1) {<br>          this.$router.push({ path: ‘/‘ })<br>          return false<br>        } else {<br>          this.$router.go(-1)<br>        }<br>      },<br>    },</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消除router-link 的下划线问题</title>
      <link href="/posts/763e2e06.html"/>
      <url>/posts/763e2e06.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="消除router-link-的下划线问题"><a href="#消除router-link-的下划线问题" class="headerlink" title="消除router-link 的下划线问题"></a>消除router-link 的下划线问题</h3><p>使用router-link实现路由跳转，代码如下：<br><router-link :to="list.path" class="link"><br>        </router-link></p><div class="layout"><br>            <div class="text"><br>            {list.title}<br>            </div><br>        </div><br><br>虽然能实现跳转了，但是文字带有了下划线，不好看<br><a href="https://imgtu.com/i/omwQJK"><img src="https://z3.ax1x.com/2021/11/27/omwQJK.png" alt="omwQJK.png"></a><p></p><p>要消除下划线，增加一下样式代码即可：<br>      .router-link-active {<br>          text-decoration: none;<br>          }<br>如果给link加了选择器也可以通过选择器来选中设置该样式<br><a href="https://imgtu.com/i/omw1zD"><img src="https://z3.ax1x.com/2021/11/27/omw1zD.png" alt="omw1zD.png"></a></p><p>效果如下<br><a href="https://imgtu.com/i/omwlRO"><img src="https://z3.ax1x.com/2021/11/27/omwlRO.png" alt="omwlRO.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> JS </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-tabs添加滚动条</title>
      <link href="/posts/2a3e1185.html"/>
      <url>/posts/2a3e1185.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="el-tabs添加滚动条"><a href="#el-tabs添加滚动条" class="headerlink" title="el-tabs添加滚动条"></a>el-tabs添加滚动条</h3><p>element-ui的el-tabs默认是没有滚动条的，可在 el-tab-pane上添加：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-tab-pane style="height:90%;overflow-y:auto;overflow-x:hidden;"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ElementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>composition API</title>
      <link href="/posts/909b49ba.html"/>
      <url>/posts/909b49ba.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><pre><code>新的option，所有的组合API函数都在此使用，且只在初始化时执行一次函数如果返回对象，对象种的属性或方法，模板种可以直接使用程序执行会先进入到setup方法当中，是组合API的入口## 执行时机    在beforeCreate之前执行，此时对象还没有被创建## setup的两个参数props和context    props:是一个对象，看props的文档，封装所有接收到的属性    context:是一个对象    里面有attrs对象(获取当前组件标签上的所有属性    但是该属性是在props中没有声明接收的所有的尚需经的对象)    emit方法(分发事件的)，slots对象(插槽)</code></pre><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><pre><code>ref是一个函数，作用：定义一个响应式数据返回的是一个Ref对象，对象种有有个value属性如果需要对数据进行操作，需要使用该Ref对象调用value属性的方式进行数据操作html中是不需要.value写法的，但是在更改元素的script标签中是需要通过.value获取元素的</code></pre><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><pre><code>定义多个响应式数据    const proxy = reactive(obj):接收一个普通对象然后返回该普通对象的响应式代理器对象    setup(){        const user = reactive({            name:'ww',            age:2,        }),        return {            user,        }    }</code></pre><h3 id="reactive和ref对比"><a href="#reactive和ref对比" class="headerlink" title="reactive和ref对比"></a>reactive和ref对比</h3><pre><code>ref是用来处理基本数据类型的，reactive是用来处理对象(递归深度响应式)如果用ref对象/数组，内部会自动将对象转为reactive的代理对象ref内部:通过给value属性添加getter/setter来实现对数据的劫持reactive内部:通过使用proxy来实现对对象内部所有数据的劫持，并通过reflect操作对象内部数据ref的数据操作:在js中要.value，在模板中不需要</code></pre><h3 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h3><pre><code>把一个响应式对象转换成普通对象，普通对象的每一个property都是一个ref利用toRefs可以将一个响应式reactive对象的所有原始属性转为响应式的ref属性</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> composition </tag>
            
            <tag> 特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>proxy跨域代理</title>
      <link href="/posts/7670789a.html"/>
      <url>/posts/7670789a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="接口的跨域问题"><a href="#接口的跨域问题" class="headerlink" title="接口的跨域问题"></a>接口的跨域问题</h3><pre><code>vue项目运行在http:8080端口API接口在https中，需要跨域请求由于API接口没有开启CORS跨域资源共享，默认情况下接口无法请求成功</code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre><code>1.把axios的请求根路径设置为vue项目的运行地址，使接口请求不在跨域2.vue项目发现请求的接口不存在，把请求转交给proxy代理3.代理把请求更路径替换为devServer.proxy属性的值，发起正在的数据请求4.代理把请求到的数据转发给axios</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 报错篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插槽</title>
      <link href="/posts/acd91e5d.html"/>
      <url>/posts/acd91e5d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="插槽基础"><a href="#插槽基础" class="headerlink" title="插槽基础"></a>插槽基础</h3><pre><code>插槽是预留给用户的占位符再封装组件时，可以通过&lt;slot&gt;元素定义插槽，从而为用户预留内容占位符&lt;template&gt;    &lt;p&gt;这是第一个p标签&lt;/p&gt;    &lt;slot&gt;&lt;/slot&gt;    &lt;p&gt;这是最后一个p标签&lt;/p&gt;&lt;/template&gt;&lt;my-com&gt;    &lt;p&gt;用户自定义内容&lt;/p&gt;&lt;/my-com&gt;</code></pre><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><pre><code>如果再封装组件的时候需要预留多个插槽节点则需要为每个&lt;slot&gt;插槽指定具体的name名称，这种带有具体名称的插槽叫做具名插槽&lt;slot name="header"&gt;&lt;/slot&gt;默认只有一个名字叫default</code></pre><p>v-slot也有缩写，缩写为#号</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><pre><code>在封装组件的过程中，可以为预留的slot插槽绑定props数据这种带有props数据&lt;slot&gt;叫做作用域插槽&lt;div&gt;    &lt;h3&gt;这是组件&lt;/h3&gt;    &lt;slot :info="infomation"&gt;&lt;/slot&gt;&lt;/div&gt;&lt;my-test&gt;    &lt;template v-slot:default="scope"&gt;        {{ scope }}    &lt;/template&gt;&lt;/my-test&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 特性 </tag>
            
            <tag> 插槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程式导航</title>
      <link href="/posts/91b1abfc.html"/>
      <url>/posts/91b1abfc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><pre><code>通过调用API实现导航的方式，叫做编程式导航通过点击链接实现导航的方式叫做声明式导航    ex:        普通页面点击&lt;a&gt;链接，vue中点击&lt;vue-link&gt;属于声明式导航        普通页面中调用location.href跳转到新页面属于编程式导航</code></pre><h3 id="vue-router中的编程式导航API"><a href="#vue-router中的编程式导航API" class="headerlink" title="vue-router中的编程式导航API"></a>vue-router中的编程式导航API</h3><pre><code>vue-router提供了许多编程式导航的API最常用的两个是：    1.this.$router.push('hash地址')        跳转到指定Hash地址从而展示对应的组件    2.this.$router.go(数值n)，-1为后退        实现导航历史的前进、后退</code></pre><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><pre><code>通过name属性为路由规则定义名称的方式ps:命名路由的name不能重复，必须保证唯一性，同params接收数据</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 导航 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宏任务和微任务</title>
      <link href="/posts/e9e40021.html"/>
      <url>/posts/e9e40021.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><pre><code>异步ajax请求setTimeout(延时器)、setInterval(定时器)文件操作其他宏任务</code></pre><h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><pre><code>promise.then、.catch和.finallyprocess.nextTick其他微任务</code></pre><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><pre><code>先执行宏任务，执行结束后查询是否有微任务执行完队列中所有的微任务后执行下一个宏任务，若无微任务执行下一个宏任务每一个宏任务执行完后都会检查是否有微任务</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宏任务 </tag>
            
            <tag> 微任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件库</title>
      <link href="/posts/45451bcc.html"/>
      <url>/posts/45451bcc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h3><p>常用Element UI <a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a><br>        vue2:<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a><br>            npm i element-ui -S<br>        vue3:<a href="https://element-plus.gitee.io/#/zh-CN">https://element-plus.gitee.io/#/zh-CN</a><br>    View UI    <a href="http://v1.iviewui.com/">http://v1.iviewui.com/</a></p><h3 id="移动端-都常用"><a href="#移动端-都常用" class="headerlink" title="移动端(都常用)"></a>移动端(都常用)</h3><pre><code>Mint UI    https://mint-ui.github.io/#!/zh-cnVant       https://vant-contrib.gitee.io/vant/#/zh-CN/</code></pre><h3 id="完整导入"><a href="#完整导入" class="headerlink" title="完整导入"></a>完整导入</h3><pre><code>//完整导入ui组件import ElementUI from 'element-ui'//导入ui组件样式import 'element-ui/lib/theme-chalk/index.css'//把ui注册为vue的插件，注册之后，可以在每个组件中直接使用ui的组件Vue.use(ElementUI)</code></pre><h3 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h3><pre><code>借助babel-plugin-component，可以只引入需要的组件，达到减小项目体积的目的1.安装babel-plugin-component    npm install babel-plugin-component -D2.修改根目录下babel.config.js的配置文件，新增plugins节点    plugins:[        [            'component',            {                libraryName:'element-ui',                styleLibraryName:'theme-chalk',            }        ]    ]3.引入对应组件部分(引入Button)    import { Button } from 'element-ui'    Vue.component(Button.name,Button)    //可以写成Vue.use(Button)</code></pre><h3 id="把组件的导入和注册封装为独立的模块"><a href="#把组件的导入和注册封装为独立的模块" class="headerlink" title="把组件的导入和注册封装为独立的模块"></a>把组件的导入和注册封装为独立的模块</h3><pre><code>在src目录下新建element-ui/index.js模块        import Vue from 'vue'        import { Button } from 'element-ui'        Vue.use(Button)在main.js中导入    import './element-ui'</code></pre><h3 id="loading效果"><a href="#loading效果" class="headerlink" title="loading效果"></a>loading效果</h3><pre><code>导入效果组件声明变量存储loading组件的实例对象    let loadingInstance = null    在拦截器中使用loading组件    loadingInstance = Loading.service({ fullscreen : true })    loadingInstance.close()关闭组件</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块化规范</title>
      <link href="/posts/185539cd.html"/>
      <url>/posts/185539cd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ES6模块化规范"><a href="#ES6模块化规范" class="headerlink" title="ES6模块化规范"></a>ES6模块化规范</h3><pre><code>每个js文件都是一个独立的模块导入其他模块成员使用import关键字 向外共享模块成员使用export关键字</code></pre><h3 id="let关键字"><a href="#let关键字" class="headerlink" title="let关键字"></a>let关键字</h3><pre><code>let取代var，使用let后变量名不能重复，不会预处理，不存在变量提升进行变量提升是在预处理中进行的，说的就是预处理的过程js代码执行之前要进行一次预处理，预解析找两个东西一个var，一个function找到var，对后面的东西进行赋值找到function后提前将函数定义好</code></pre><h3 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h3><pre><code>定义之后无法改变</code></pre><h3 id="变量的解构和赋值"><a href="#变量的解构和赋值" class="headerlink" title="变量的解构和赋值"></a>变量的解构和赋值</h3><pre><code>理解：从对象或数组中提取数据，并赋值给变量(多个)1.对象的解构赋值    let{n,a} = {n:'tom',a:12}2.数组的解构赋值    let[n,a] = [1,'aaa']    let[a,b] = [,1]//按照下标取值,可以用,来隔开取后面的</code></pre><h3 id="模板字符串，解决字符串拼接输出的问题，不用频繁-和引号"><a href="#模板字符串，解决字符串拼接输出的问题，不用频繁-和引号" class="headerlink" title="模板字符串，解决字符串拼接输出的问题，不用频繁+和引号"></a>模板字符串，解决字符串拼接输出的问题，不用频繁+和引号</h3><pre><code>模板字符串必须用``包含变化的部分使用${XXX}来定义</code></pre><h3 id="简化的对象写法"><a href="#简化的对象写法" class="headerlink" title="简化的对象写法"></a>简化的对象写法</h3><pre><code>同名的属性可以省略ex:let us = 'haha'let b = '1'let obj = {    //us = us    //b = b    同名，直接替换    us,b}</code></pre><h3 id="箭头函数，简化函数"><a href="#箭头函数，简化函数" class="headerlink" title="箭头函数，简化函数"></a>箭头函数，简化函数</h3><pre><code>传统：    var fun4 = function(){        xxx    }改版：    let fun4 = (这里面放参数) =&gt; {语句}若参数和语句只有一条，可以省略()或者{}，若函数体和形参不止一个不能省略特点：    1.简介    2.箭头函数没有自己的this      箭头函数的this不是调用的时候决定的      而是在定义的时候处在的对象就是它的this    3.如果没有外层函数，this是window      如果有，this是外层函数      外层函数的普通函数，就看谁调用它，this就是谁</code></pre><h3 id="点点点-…-运算符-获取内部所有字符"><a href="#点点点-…-运算符-获取内部所有字符" class="headerlink" title="点点点(…)运算符(获取内部所有字符)"></a>点点点(…)运算符(获取内部所有字符)</h3><pre><code>1.rest可变参数，用来取代arguments2.function fun(...values){    console.log(values)    values.forEach(function (item,index){        console.log(item,index)    })}//遍历，获取所有参数2.扩展运算符    let arr = [1,6]    let arr1 = [2,3,4,5]    arr = [1,...arr1,6]</code></pre><h3 id="promise解决地狱回调问题"><a href="#promise解决地狱回调问题" class="headerlink" title="promise解决地狱回调问题"></a>promise解决地狱回调问题</h3><pre><code>看promise文件夹</code></pre><h3 id="symbol新增的原始数据类型-解决唯一性"><a href="#symbol新增的原始数据类型-解决唯一性" class="headerlink" title="symbol新增的原始数据类型(解决唯一性)"></a>symbol新增的原始数据类型(解决唯一性)</h3><pre><code>需要使用方法来创建,用数组来添加    let symbol = Symbol()    obj[symbol] = 'hello'还可以用来定义常量const Person_key = Symbol('person_key')</code></pre><h3 id="Generator函数，解决异步编程的方案之一"><a href="#Generator函数，解决异步编程的方案之一" class="headerlink" title="Generator函数，解决异步编程的方案之一"></a>Generator函数，解决异步编程的方案之一</h3><pre><code>1.是一个状态机，内部封装了不同状态的数据2.用来生成遍历器对象3.可暂停函数(惰性求值),yield可暂停  next可启动  每次返回的是yield后的表达式结果特点：    function与函数名之间有一个星号    内部用yield表达式来定义不同的状态ex:function* myGenerator(){    yield 'hello'    }    let MG = myGenerator()    MG.next()</code></pre><h3 id="async来进一步提高异步编程generator函数"><a href="#async来进一步提高异步编程generator函数" class="headerlink" title="async来进一步提高异步编程generator函数"></a>async来进一步提高异步编程generator函数</h3><h3 id="class的定义"><a href="#class的定义" class="headerlink" title="class的定义"></a>class的定义</h3><pre><code>class Person{    constructor(name,age){//类的构造方法        this.name = name;        this.age = age;    }    showName(){//类的一般方法        console.log()    }}let person = new Person('kk',39)person.showNameclass StarPerson extends Person{    constructor(name,age,salary){        super(name,age)//写了这个表明调用了父类的方法        this.salary = salary    }}</code></pre><h3 id="字符串数组的扩展"><a href="#字符串数组的扩展" class="headerlink" title="字符串数组的扩展"></a>字符串数组的扩展</h3><pre><code>1.includes(str)判断是否包含指定字符串2.startsWith(str)判断是否以指定字符串开头3.endsWith(str)判断是否以指定字符串结尾4.repeat(count)重复指定次数</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less</title>
      <link href="/posts/d3b694df.html"/>
      <url>/posts/d3b694df.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="less使用"><a href="#less使用" class="headerlink" title="less使用"></a>less使用</h3><pre><code>需要把less预处理为css然后使用到网页中//不会被编译到css中/**/会被编译到css中，//是给开发人员开的</code></pre><h3 id="less中的变量"><a href="#less中的变量" class="headerlink" title="less中的变量"></a>less中的变量</h3><pre><code>使用@来申明一个变量    @pink:pink1.作为普通属性值只用来使用：直接使用@pink2.作为选择器和属性名：#@{selector的值}的形式3.作为URL：@{url}4.变量的延迟加载</code></pre><h3 id="less嵌套"><a href="#less嵌套" class="headerlink" title="less嵌套"></a>less嵌套</h3><pre><code>1.父子是嵌套2.&amp;是平级</code></pre><h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><pre><code>提取公共代码提取出来的东西类似函数，但是叫混合变量后面加冒号是默认值</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS小记录</title>
      <link href="/posts/831f1623.html"/>
      <url>/posts/831f1623.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JS相关问题"><a href="#JS相关问题" class="headerlink" title="JS相关问题"></a>JS相关问题</h2><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><pre><code>1.你定义的2.你没有调用3.最终都执行了ex:定时器执行操作，定义了，没有调用，时间到后最终执行了ex:dom事件回调函数，你定义了一个绑定点击的事件，没有手动添加执行，而是点击才执行，最终也执行了这个函数</code></pre><h2 id="常用的回调函数"><a href="#常用的回调函数" class="headerlink" title="常用的回调函数"></a>常用的回调函数</h2><pre><code>1.dom事件回调函数2.定时器回调函数3.ajax请求回调函数4.声明周期回调函数</code></pre><h2 id="如何确定this的值"><a href="#如何确定this的值" class="headerlink" title="如何确定this的值"></a>如何确定this的值</h2><pre><code>1.test():window   直接调用2.p.test():p  用p去调用3.new test():新创建的对象4.p.call(obj):obj js中独有的，将任意方法赋予其他类型</code></pre><h2 id="JSON和JS相互转换"><a href="#JSON和JS相互转换" class="headerlink" title="JSON和JS相互转换"></a>JSON和JS相互转换</h2><pre><code>1.JSON.stringify(obj/arr)    js转json2.JSON.parse(json)    json转js</code></pre><h2 id="将函数内部的this绑定为指定的对象"><a href="#将函数内部的this绑定为指定的对象" class="headerlink" title="将函数内部的this绑定为指定的对象"></a>将函数内部的this绑定为指定的对象</h2><pre><code>var obj = {username:'kkk'}function foo(data){}foo.call(obj,33)foo.apply(obj,[33])foo.bind(obj,33)()用自调用或者重新调用var a = foo.bind(obj,33)a()1.bind()2.call()3.apply()在不传参的情况下，call和apply是一样的,apply参数必须放在数组中，而bind的特性是绑定完后会把函数返回</code></pre><h2 id="预处理和变量提升"><a href="#预处理和变量提升" class="headerlink" title="预处理和变量提升"></a>预处理和变量提升</h2><p>进行变量提升是在预处理中进行的，说的就是预处理的过程，js代码执行之前要进行一次预处理，预解析，找两个东西，一个var，一个function，找到var，对后面的东西进行赋值，找到function后提前将函数定义好</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios配置</title>
      <link href="/posts/a01ef157.html"/>
      <url>/posts/a01ef157.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="全局配置axios发起ajax请求"><a href="#全局配置axios发起ajax请求" class="headerlink" title="全局配置axios发起ajax请求"></a>全局配置axios发起ajax请求</h3><pre><code>在main.js入口文件中，通过app.config.globalProperties全局挂载axiosex:    axios.defaults.baseURL = 'http://api.com'    app.config.globalProperties.$http = axios    this.$http.get('/user')    this.$http.post('/count')ps:$http可以换成自己任意的名字    baseURL配置的是基本路径    配置请求拦截器    //有一个成功和一个失败的回调，失败可以省略，成功必须return config        axios.interceptors.request.use(config = {            return config        })        配置响应拦截器    axos.interceptors.response.use(function (response{        return response;    }))</code></pre><h3 id="vue2中全局配置axios"><a href="#vue2中全局配置axios" class="headerlink" title="vue2中全局配置axios"></a>vue2中全局配置axios</h3><pre><code>axios.defaults.baseURL = 'https://www.escook.cn'//通过Vue构造函数的原型对象全局配置axiosVue.prototype.$http = axios</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-yield</title>
      <link href="/posts/a6439255.html"/>
      <url>/posts/a6439255.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ES6-yield"><a href="#ES6-yield" class="headerlink" title="ES6 yield"></a>ES6 yield</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>yield 关键字用来暂停和继续一个生成器函数。我们可以在需要的时候控制函数的运行。<br>yield 关键字使生成器函数暂停执行，并返回跟在它后面的表达式的当前值。与return类似，但是可以使用next方法让生成器函数继续执行函数yield后面内容，直到遇到yield暂停或return返回或函数执行结束。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>函数返回对象包括value和done。其中value值是yield后面表达式值或return后面表达式值。done用于表示函数运行<br>    function* get() {    //声明时需要添加*，普通函数内部不能使用yield关键字，                             //否则会出错<br>      yield ‘1’;<br>      return ‘2’;<br>}</p><pre><code>var a = get();    //调用函数后不会运行，而是返回指向函数内部状态的指针a.next();    // { value: '1', done: false }   遇到yield暂停a.next();    // { value: '2', done: true}    函数执行完毕，返回donea.next();    // { value: undefined, done: true}  已经执行完毕，返回undefined</code></pre><p>如果next没有带有参数true，yield不能返回值，返回undefined；next函数带有参数true，即.next(true)时，那么yield就可以返回表达式的值，用于赋值。如果next带有其他参数，那么它就会将当前yield返回值置为该参数</p><h4 id="搭配异步"><a href="#搭配异步" class="headerlink" title="搭配异步"></a>搭配异步</h4><p>函数在遇到yield后暂停运行，我们可以在需要的地方使用next让它继续运行。并且必要时可以使用next传入参数。</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> yield </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux-saga</title>
      <link href="/posts/5cd8cdf7.html"/>
      <url>/posts/5cd8cdf7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a><a href="https://redux-saga-in-chinese.js.org/">redux-saga</a></h3><pre><code>npm install -save redux-sagayarn add redux-saga</code></pre><h3 id="为了能跑起-Saga，我们需要使用-redux-saga-中间件将-Saga-与-Redux-Store-建立连接。"><a href="#为了能跑起-Saga，我们需要使用-redux-saga-中间件将-Saga-与-Redux-Store-建立连接。" class="headerlink" title="为了能跑起 Saga，我们需要使用 redux-saga 中间件将 Saga 与 Redux Store 建立连接。"></a>为了能跑起 Saga，我们需要使用 redux-saga 中间件将 Saga 与 Redux Store 建立连接。</h3><pre><code>main.js    import { createStore,applyMiddleware } from 'redux'    import createSagaMiddleware from 'redux-saga'    import sagas from '路径'        const sagaMiddleware = createSagaMiddleware()    const store = createStore(        reducer,        applyMiddleware(sagaMiddleware)    )    sagaMiddleware.run(mySaga)    export default store</code></pre><h3 id="写generator函数-拦截dispatch"><a href="#写generator函数-拦截dispatch" class="headerlink" title="写generator函数,拦截dispatch"></a>写generator函数,拦截dispatch</h3><pre><code>//从effects里面解构出来takeEvery来使用import { takeEvery,put } from 'redux-saga/effects'function * sagaAsync(){    yiel put( {type:'add',data:0 })}//接收所有的dispatch对应的action的请求func * sagas(){    yield takeEvery('sagaAdd',sagaAsync)}export default sagas</code></pre><p>这样一个基本的saga使用就完成了,put里面执行的是真正的dispatch，takeEvery里面只是接收,如果两个方法名字重名的话可能会导致无限循环</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
            <tag> Redux-saga </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSSTransitionGroup</title>
      <link href="/posts/df140f5b.html"/>
      <url>/posts/df140f5b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="css动画之CSSTransitionGroup"><a href="#css动画之CSSTransitionGroup" class="headerlink" title="css动画之CSSTransitionGroup"></a>css动画之CSSTransitionGroup</h3><pre><code>当一个React组件添加或者移除一个DOM的时候可以轻易的实现CSS动画。</code></pre><h3 id="路由动画react-transition-group"><a href="#路由动画react-transition-group" class="headerlink" title="路由动画react-transition-group"></a>路由动画react-transition-group</h3><pre><code>yarn add react-transition-group -Snpm install react-transition-group -S</code></pre><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><pre><code>import {CSSTransition} from 'react-transition-group'</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code>&lt;CSSTransition&gt;&lt;/CSSTransition&gt;来包裹触发的内容    render(){        return (            &lt;div&gt;                &lt;CSSTransition                    in={ this.state.show }//状态信息                    timeout={ 200 }//时间                    classNames="my-node"//样式                    mountOnEnter//消失                    unmountOnExit//出现                &gt;                    &lt;div&gt;hello&lt;/div&gt;                &lt;/CSSTransition&gt;                &lt;button onClick={ this.方法 }&gt;click&lt;/button&gt;            &lt;/div&gt;        )    }</code></pre><h3 id="样式属性"><a href="#样式属性" class="headerlink" title="样式属性"></a>样式属性</h3><pre><code>[样式属性](https://reactcommunity.org/react-transition-group/)</code></pre><h3 id="动画组必须是已经挂载了才会起作用"><a href="#动画组必须是已经挂载了才会起作用" class="headerlink" title="动画组必须是已经挂载了才会起作用"></a>动画组必须是已经挂载了才会起作用</h3><pre><code>为了给CSSTransitionGroup的子级DOM添加动画效果我们的CSSTransitionGroup必须是挂载到了DOM中了或者transitionAppear必须设置为true。</code></pre><h3 id="安装CSS动画库"><a href="#安装CSS动画库" class="headerlink" title="安装CSS动画库"></a>安装CSS动画库</h3><pre><code>1. npm install animate.css --saveyarn add animate.css2. 引入项目 import 'animate.css'3.         &lt; CSSTransition            classNames="my-node"//样式            &gt;            &lt;div&gt;hello&lt;/div&gt;        &lt;/CSSTransition&gt;替换classNames为其中的需要的样式，名字按照官网自行找到需要的样式,若要搭配appear的动画，则需要在&lt;CSSTransition&gt;标签中添加appear={true}&lt;/CSSTransition&gt;官网：[animate](https://animate.style/)    classNames={{        appear:'my-appear',        appearActive:'my-active-appear',        appearDone:'my-done-appear',        enter:'my-enter',        enterActive:'my-active-enter',        enterDone:'my-done-enter',        exit:'my-exit',        exitActive:'my-active-exit',        exitDone:'my-done-exit',        }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 路由动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobx</title>
      <link href="/posts/2a423ca.html"/>
      <url>/posts/2a423ca.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h3><p>依赖：npm i mobx -S、npm i mobx-react -S</p><h3 id="装饰器语法"><a href="#装饰器语法" class="headerlink" title="装饰器语法"></a>装饰器语法</h3><p>npm i @babel/plugin-proposal-decorators -D<br>npm i @babel/plugin-proposal-class-properties -D</p><h3 id="使用babel插件"><a href="#使用babel插件" class="headerlink" title="使用babel插件"></a>使用babel插件</h3><pre><code>"babel":{    "plugins":[        ["@babel/plugin-proposal-decorators",{"legacy":true}],        ["@babel/plugin-proposal-class-properties",{"loose":true}]    ]}</code></pre><h3 id="ESLint配置"><a href="#ESLint配置" class="headerlink" title="ESLint配置"></a>ESLint配置</h3><pre><code>"eslintConfig":{    "parserOptions":{        "ecmaFeatures":{            "legacyDecorators":true        }    }}</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>通过mobx-react中的Provider来连接mobx和react<br>并在想使用数据的地方用<provider store="{store}"></provider>标签来包裹起来</p><h3 id="使用mobx"><a href="#使用mobx" class="headerlink" title="使用mobx"></a>使用<a href="https://cn.mobx.js.org/">mobx</a></h3>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mobx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue脚手架报错</title>
      <link href="/posts/fa8124b5.html"/>
      <url>/posts/fa8124b5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、Vue3-0-脚手架报错："><a href="#一、Vue3-0-脚手架报错：" class="headerlink" title="一、Vue3.0 脚手架报错："></a>一、Vue3.0 脚手架报错：</h3><p><a href="https://imgtu.com/i/I0dX6A"><img src="https://z3.ax1x.com/2021/11/11/I0dX6A.png" alt="报错"></a><br>    [vue/no-multiple-template-root] The template root requires exactly one element.<br>    eslint-plugin-vue 查看问题 (⌥F8) 没有可用的快速修复<br>    百度翻译：<br>    [vue/无多个模板根目录]模板根目录只需要一个元素。<br>    eslint-plugin-vue 查看问题 (⌥（F8）没有可用的快速修复</p><h3 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h3><p>查阅资料是插件 Vetur 还没兼容到最新版vue语法；<br>通过设置 搜索 eslint-plugin-vue， 取消校验勾选即可。<br><a href="https://imgtu.com/i/I0djOI"><img src="https://z3.ax1x.com/2021/11/11/I0djOI.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 报错篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hooks</title>
      <link href="/posts/712433a6.html"/>
      <url>/posts/712433a6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-useState保存组件得状态"><a href="#1-useState保存组件得状态" class="headerlink" title="1.useState保存组件得状态"></a>1.useState保存组件得状态</h3><p>格式<br>    let [state的名称,方法名] = useState(初始值)<br>    let [count,setCount] = useState(1)<br>useState不帮助处理状态，相较于setState非覆盖式更新状态，useState覆盖式更新状态，需要我们自己处理逻辑</p><h3 id="2-useEffect处理副作用"><a href="#2-useEffect处理副作用" class="headerlink" title="2.useEffect处理副作用"></a>2.useEffect处理副作用</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">useEffect的第二个参数表示依赖的值如果第二个参数是一个空数组，则表示不依赖任何值只在第一次执行且只执行一次，可类比componentDidMount若传入参数则表示依赖其值的变化。let [data,setData] = useState({count:0})useEffect(() =&gt;{console.log('effect')},[])//去替代一些生命周期函数useEffect(()=&gt;{//ajax操作可以放在这里console.log('mounted')return () =&gt;{console.log('unmount')}},[])return (&lt;div&gt;{data.count}&lt;/div&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-useContext减少组件层级"><a href="#3-useContext减少组件层级" class="headerlink" title="3.useContext减少组件层级"></a>3.useContext减少组件层级</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">React封装好的处理多层级传递数据的方法let name = createContext({name:'zz'})let age = createContext({age:12})function UseContext(){let name = useContext(name)let age = useContext(age)return(&lt;div&gt;{ name.name } { age.age }&lt;/div&gt;)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-useReducer代替Redux中得Reducer"><a href="#4-useReducer代替Redux中得Reducer" class="headerlink" title="4.useReducer代替Redux中得Reducer"></a>4.useReducer代替Redux中得Reducer</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">在使用上几乎和Redux/React-Redux一模一样唯一缺少的就是无法使用redux提供的中间件const init = {count :0}const reducer = (State,action)=&gt;{switch(action.type){case 1:case 2:default:}}function UseReducer(){//useReducer需要俩参数，定义的reducer和初始值，并且返回state和dispatch,可以用[]来解构let [state,dispatch] = useReducer(reducer,init)return ( &lt;div&gt;&lt;button onClick={ () =&gt; dispatch( { type:'1' } ) }&gt;&lt;/button&gt;&lt;button onClick={ () =&gt; dispatch( { type:'2' } ) }&gt;&lt;/button&gt;&lt;span&gt;{ state.count }&lt;/span&gt;&lt;/div&gt; )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-useCallback记忆函数"><a href="#5-useCallback记忆函数" class="headerlink" title="5.useCallback记忆函数"></a>5.useCallback记忆函数</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">使用useCallback可以获得一个记忆后的函数来帮助我们减少未变化的组件的渲染搭配React.memo，用memo将想要缓存的组件包裹起来import {memo} from 'reactconst Child = memo( function ( props ) {console.log('child')return (&lt;div&gt;            &lt;h1&gt;hello&lt;/h1&gt;            &lt;button onClick = { props.onAdd }&gt;add&lt;/button&gt;&lt;/div&gt;)},() =&gt;{ return true }//第二个参数，如果为true则不执行，可以通过复杂逻辑来判断子组件是否来进行缓存)export default function UseCallback() {let [ count,setCount ] = useState(0)const handleAdd = useCallback(() =&gt; {console.log('add')},[])return (&lt;div&gt;{count}&lt;/div&gt;&lt;Child onAdd = {handleAdd}&gt;&lt;/Child&gt;&lt;button onClick = { () =&gt; setCount(100) }&gt;change&lt;/button&gt;)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-useMemo记忆组件"><a href="#6-useMemo记忆组件" class="headerlink" title="6.useMemo记忆组件"></a>6.useMemo记忆组件</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">useCallback的功能完全可以由useMemo所取代如果想通过useMemo返回一个记忆函数也是可以的唯一的区别是：useCallback不会执行第一个参数函数，而是将它返回给你而useMemo会执行第一个函数并将函数执行结果返回给你所以useCallback常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用而useMemo更适合经过函数计算得到一个确定的值，比如记忆组件function Parent( {a,b} ){const child1 = useMemo ( () =&gt; () =&gt; &lt;Child a={a}/&gt;,[a]);const child1 = useMemo ( () =&gt; () =&gt; &lt;Child b={b}/&gt;,[b]);return (&lt;div&gt;{ child1 }{ child2 }&lt;/div&gt;)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-memoization"><a href="#7-memoization" class="headerlink" title="7.memoization"></a>7.memoization</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">仅在输入变化的时，重新计算render需要使用的值---memoization在函数式组件中，中间件memoize要放到组件外部，否则会重复调用，无法缓存import memoize from "memoize-one"const getString = memoize((str) =&gt; {   console.log(1)   return str + '3'})const Child = function(props) {   return (      &lt;div&gt;        {getString(props.title)}      &lt;/div&gt;   )}function Memoization(){  let [title,setTitle] = useState('hello')  return (    &lt;div&gt;      &lt;Child title = 'wa'&gt;&lt;/Child&gt;      &lt;button onClick={()=&gt;setTitle('hello+')}&gt;change&lt;button&gt;    &lt;/div&gt;  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在class中则不需要</p><h3 id="8-useRef保存引用值"><a href="#8-useRef保存引用值" class="headerlink" title="8.useRef保存引用值"></a>8.useRef保存引用值</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">import {createRef,useRef} from 'react'function UseRef(){  const btn = createRef()//旧版定义  const btn2 = useRef()//新版定义  return (    &lt;div&gt;      &lt;button ref={btn}&gt;click&lt;/button&gt;    &lt;/div&gt;  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[1] useRef返回得值传递给组件或者DOM得ref属性，就可以通过ref.current值访问组件或真实得DOM节点，重点是组件也是可以访问到得</li><li>[2]利用useRef就可以绕过Capture Value得特性，可以认为ref在所有Render过程中保持着唯一引用，因此所有对ref的赋值或取值，拿到的都只有一个最终状态，而不会在每个Render间存在间隔</li><li>[3]将赋值与取值得对象编程useRef，而不是useState，就可以躲过capture value特性，在最后得到最新的值</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">    function App(){const count = useRef(0)const showCount = () =&gt;{console.log("count: "+ count.current)}const handleClick = number =&gt; {count.current = count.current + number;setTimeout(showCount,3000)}return (&lt;div&gt;&lt;p&gt;{count.current}&lt;/p&gt;&lt;button onClick={()=&gt;handleClick(1)}&gt;增加&lt;/button&gt;&lt;button onClick={()=&gt;handleClick(-1)}&gt;减少&lt;/button&gt;&lt;/div&gt;)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-自定义Hooks"><a href="#9-自定义Hooks" class="headerlink" title="9.自定义Hooks"></a>9.自定义Hooks</h3><p>定义一个自定义的Hook需要use打头，比如useCount.js，且函数内部可以调用其他Hook</p><h3 id="10-useImperativeHandle透传Ref"><a href="#10-useImperativeHandle透传Ref" class="headerlink" title="10.useImperativeHandle透传Ref"></a>10.useImperativeHandle透传Ref</h3><h3 id="11-useLayoutEffect同步执行副作用"><a href="#11-useLayoutEffect同步执行副作用" class="headerlink" title="11.useLayoutEffect同步执行副作用"></a>11.useLayoutEffect同步执行副作用</h3><h3 id="12-useEffect和useLayoutEffect的区别"><a href="#12-useEffect和useLayoutEffect的区别" class="headerlink" title="12.useEffect和useLayoutEffect的区别"></a>12.useEffect和useLayoutEffect的区别</h3><p>调用时机不同，后者在react完成DOM更新后马上同步调用代码，会阻塞页面的渲染，而useEffect是会在整个页面渲染完才会调用代码<br>官方建议优先使用useEffect<br>在实际使用的时候如果想避免页面抖动(在useEffect里修改DOM很有可能出现)的化，可以把需要操作DOM的代码放在useLayoutEffect里。<br>不过useLayoutEffec在服务器渲染的时候会出现一个warning，要消除的化得用useEffect代替或者推迟渲染时机。</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/posts/9520183a.html"/>
      <url>/posts/9520183a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="登录MySql"><a href="#登录MySql" class="headerlink" title="登录MySql"></a>登录MySql</h3><p>mysql -uroot -p</p><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>1、显示数据库列表。<br>show databases;<br>2、显示库中的数据表：<br>use mysql； ／／打开库<br>show tables;<br>3、显示数据表的结构：<br>describe 表名;<br>4、建库：<br>create database 库名;</p><p>GBK: create database test2 DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci;<br>UTF8: CREATE DATABASE <code>test2</code> DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;<br>5、建表：<br>use 库名；<br>create table 表名(字段设定列表)；<br>6、删库和删表:<br>drop database 库名;<br>drop table 表名；<br>7、将表中记录清空：<br>delete from 表名;</p><p>truncate table  表名;<br>8、显示表中的记录：<br>select * from 表名;</p><p>9、编码的修改<br>如果要改变整个mysql的编码格式：<br>启动mysql的时候，mysqld_safe命令行加入<br>–default-character-set=gbk </p><p>如果要改变某个库的编码格式：在mysql提示符后输入命令<br>alter database db_name default character set gbk;</p><p>10.重命名表</p><p>alter table t1 rename t2;</p><p>11.查看sql语句的效率</p><p> explain &lt; table_name &gt;</p><p>例如：explain select * from t3 where id=3952602;</p><p>12.用文本方式将数据装入数据库表中(例如D:/mysql.txt)</p><p>mysql&gt; LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE MYTABLE;</p>]]></content>
      
      
      <categories>
          
          <category> 配置篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒加载</title>
      <link href="/posts/3d72a2c2.html"/>
      <url>/posts/3d72a2c2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>将路由通过Suspense标签包裹， 并通过lazy懒加载的方式导入对应的文件来进行代码分割，选择性的重新渲染整个页面，这样就不必在渲染的同时再和页面上的其他元素进行交互。<br><a href="https://imgtu.com/i/IYsqHO"><img src="https://z3.ax1x.com/2021/11/09/IYsqHO.png" alt="IYsqHO.png"></a><br><a href="https://imgtu.com/i/IYsbDK"><img src="https://z3.ax1x.com/2021/11/09/IYsbDK.png" alt="IYsbDK.png"></a><br>这样可以在点击对应的模块的时候去获取对应的资源<br><a href="https://imgtu.com/i/IYsHu6"><img src="https://z3.ax1x.com/2021/11/09/IYsHu6.png" alt="IYsHu6.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-router </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接池url时区陷阱</title>
      <link href="/posts/a859f83a.html"/>
      <url>/posts/a859f83a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="mysql-jdbc-url-时间-mysqlJDBC连接池url时区陷阱"><a href="#mysql-jdbc-url-时间-mysqlJDBC连接池url时区陷阱" class="headerlink" title="mysql jdbc url 时间_mysqlJDBC连接池url时区陷阱"></a>mysql jdbc url 时间_mysqlJDBC连接池url时区陷阱</h3><p>在使用mysql的6.0.x以上的jar的时候，需要在代码url的链接里面指定serverTimezone。否则就会出现异常。</p><p>如果在url中未指定serverTimezone</p><p>url: jdbc:mysql://127.0.0.1:3306/spring_boot_quick?useUnicode=true&amp;characterEncoding=utf-8</p><p>则会出现：Caused by: com.mysql.cj.core.exceptions.InvalidConnectionAttributeException:</p><p>The server time zone value ‘�й���׼ʱ��’ is unrecognized or represents more than one time zone.</p><p>You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more</p><p>specifc time zone value if you want to utilize time zone support 此异常</p><p>因为之前这种问题确实没有遇到过，因为google后，找到的答案是在url后面加上参数?serverTimezone=utc</p><p>eg:url: jdbc:mysql://127.0.0.1:3306/spring_boot_quick?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</p><p>此时虽然服务可以正常启动了，程序不报错了，但是又会有新的问题发生，就是我们在用java代码插入到数据库时间的时候却出现了问题。</p><p>比如在java代码里面插入的时间为：2019-04-12 13:29:56</p><p>但是在数据库里面显示的时间却为：2019-04-12 05:29:56</p><p>仔细一想，UTC代表的是全球标准时间 ，但是我们使用的时间是北京时区也就是东八区，领先UTC八个小时。所以应该是：UTC + (＋0800) = 本地(北京)时间</p><p>解决方案：url的时区使用中国标准时间,因此需要修改时区：</p><p>serverTimezone=Asia/Shanghai</p><p>问题解决！！！<br>————————————————<br>版权声明：本文为CSDN博主「兽医黄小立」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_29129247/article/details/113995811">https://blog.csdn.net/weixin_29129247/article/details/113995811</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 配置篇 </category>
          
          <category> 报错篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底解决Could not transfer artifact org.apache.maven.plugins问题</title>
      <link href="/posts/c3f61ef.html"/>
      <url>/posts/c3f61ef.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="彻底解决Could-not-transfer-artifact-org-apache-maven-plugins问题"><a href="#彻底解决Could-not-transfer-artifact-org-apache-maven-plugins问题" class="headerlink" title="彻底解决Could not transfer artifact org.apache.maven.plugins问题"></a>彻底解决Could not transfer artifact org.apache.maven.plugins问题</h3><p>彻底解决Could not transfer artifact org.apache.maven.plugins问题<br>之前自己的maven一直下载不了，看过好多博客问题也没法解决，最后自己综合慢慢解决了，现分享一下自己的解决办法：</p><h4 id="1、首先保证你的settings配置没问题"><a href="#1、首先保证你的settings配置没问题" class="headerlink" title="1、首先保证你的settings配置没问题"></a>1、首先保证你的settings配置没问题</h4><p><a href="https://imgtu.com/i/I0dz0P"><img src="https://z3.ax1x.com/2021/11/11/I0dz0P.png"></a><br>这里打开File - settings进行路径配置，选择自己的maven路径进行设置。</p><h4 id="2、maven中的settings-xml文件中的镜像资源配置"><a href="#2、maven中的settings-xml文件中的镜像资源配置" class="headerlink" title="2、maven中的settings.xml文件中的镜像资源配置"></a>2、maven中的settings.xml文件中的镜像资源配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>mirror<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>id<span class="token punctuation">&gt;</span></span>alimaven<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>aliyun maven<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>url<span class="token punctuation">&gt;</span></span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>repositories<span class="token operator">/</span>central<span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>mirrorOf<span class="token punctuation">&gt;</span></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> junit镜像地址 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>mirror<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>id<span class="token punctuation">&gt;</span></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>junit <span class="token class-name">Address</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>url<span class="token punctuation">&gt;</span></span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>jcenter<span class="token punctuation">.</span>bintray<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>mirrorOf<span class="token punctuation">&gt;</span></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置阿里云的镜像资源。</p><p>此时一般问题可以解决，若果不能，请继续：</p><h4 id="3、在解压的maven文件夹下将conf文件夹中的settings-xml和toolchains-xml复制过来如图"><a href="#3、在解压的maven文件夹下将conf文件夹中的settings-xml和toolchains-xml复制过来如图" class="headerlink" title="3、在解压的maven文件夹下将conf文件夹中的settings.xml和toolchains.xml复制过来如图"></a>3、在解压的maven文件夹下将conf文件夹中的settings.xml和toolchains.xml复制过来如图</h4><p><a href="https://imgtu.com/i/IGuoSx"><img src="https://z3.ax1x.com/2021/11/08/IGuoSx.png" alt="IGuoSx.png"></a></p><h4 id="4、更改idea中的settings设置，解决证书等问题"><a href="#4、更改idea中的settings设置，解决证书等问题" class="headerlink" title="4、更改idea中的settings设置，解决证书等问题"></a>4、更改idea中的settings设置，解决证书等问题</h4><h4 id="向File-settings中的maven-importing中添加这句"><a href="#向File-settings中的maven-importing中添加这句" class="headerlink" title="向File - settings中的maven - importing中添加这句"></a>向File - settings中的maven - importing中添加这句</h4><pre><code>-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true</code></pre><p>能够解决证书问题，如图所示：<br><a href="https://imgtu.com/i/I0wSTf"><img src="https://z3.ax1x.com/2021/11/11/I0wSTf.png"></a></p><p>到这里基本就ok了如果还不行，再向File - settings中的maven - Runner中添加这句话：<br>    -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true -DarchetypeCatalog=internal</p><p>如图所示：<br><a href="https://imgtu.com/i/I0dxmt"><img src="https://z3.ax1x.com/2021/11/11/I0dxmt.png"></a></p><p>成功！！！</p>]]></content>
      
      
      <categories>
          
          <category> 配置篇 </category>
          
          <category> 报错篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-router v6的一些个人看法</title>
      <link href="/posts/d044eab7.html"/>
      <url>/posts/d044eab7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="react-router的一些个人看法"><a href="#react-router的一些个人看法" class="headerlink" title="react-router的一些个人看法"></a>react-router的一些个人看法</h3><p>前几天刚刚更新了react-router路由的第六版本的稳定版<br>而且居然全部都是用TS重写，强烈表示好评<br>变化很大，api也变化了很大<br>网上大部分教程还是用着5的版本所以只能硬着头皮去啃<br>下面列出一些自己看文档与演练的一些东西。</p><h3 id="Switch更名为Routes"><a href="#Switch更名为Routes" class="headerlink" title="Switch更名为Routes"></a>Switch更名为Routes</h3><ol><li>Switch里面就是放各个路由Route的，改名为Routes我个人感觉更好理解了<br><a href="https://imgtu.com/i/IlONOH"><img src="https://z3.ax1x.com/2021/11/07/IlONOH.png" alt="route"></a><br><a href="https://imgtu.com/i/IlOt6e"><img src="https://z3.ax1x.com/2021/11/07/IlOt6e.png" alt="link"></a></li><li>Routes和Link是相对的<br> 这意味着它们会自动构建在父路由的路径和 URL 上<br> 因此您不必手动添加 match.URL 或 match.path<br> 这就导致<route path="">与<link to="">有了更好的匹配，代码更加简洁<br> 路由是根据最佳匹配而不是按顺序选择的</route></li><li>可以省略父级的地址直接写子的地址，而且<route>是可以直接嵌套子路由的<br>路由可以嵌套在一个地方，也可以分布在不同的子组件中<br><a href="https://imgtu.com/i/IlO8fK"><img src="https://z3.ax1x.com/2021/11/07/IlO8fK.png" alt="嵌套"></a></route></li><li>Route exact取消了。<br>相反，带有子代路由(在其他组件中定义)的路由在其路径中使用尾随的 * 来表示它们之间有很深的匹配关系<h3 id="Route-element"><a href="#Route-element" class="headerlink" title="Route element"></a>Route element</h3>Route的 render 或 component 改为 element</li></ol><h3 id="取消了Redirect"><a href="#取消了Redirect" class="headerlink" title="取消了Redirect"></a>取消了Redirect</h3><p>5.1中取消了 Redirect ，并且官方推荐在服务器端进行跳转</p><h3 id="Route-path"><a href="#Route-path" class="headerlink" title="Route path"></a>Route path</h3><p>v6 简化了 path 的格式，只支持两种动态占位符：</p><p>:id 样式参数</p><ul><li><p>通配符，只能在 path 的末尾使用，如users/*<br>举个例子<br>正确的<br>path = ‘/groups’<br>path = ‘/groups/admin’<br>path = ‘/users/:id’<br>path = ‘/users/:id/messages’<br>path = ‘/files/<em>‘ // 通配符放在末尾<br>path = ‘/files/:id/</em>‘<br>path = ‘/files-<em>‘<br>不正确的<br>path = ‘/users/:id?’ // ? 不满足上面两种格式<br>path = ‘/tweets/:id(\d+)’ // 有正则，不满足上面两种格式<br>path = ‘/files/</em>/cat.jpg’// 通配符不能放中间</p><h3 id="Route-index"><a href="#Route-index" class="headerlink" title="Route index"></a>Route index</h3><p>用于表示是否是主路由，如果这个路由设置为true的话，则不能有children</p></li></ul><h3 id="Outlet"><a href="#Outlet" class="headerlink" title="Outlet"></a>Outlet</h3><p>类似于slot插槽的一个东西，可以渲染你的子路由渲染的东西<br>比如这里我定义了一个路由<user>，以及它的两个子路由<userlist><userdetail><br><a href="https://imgtu.com/i/IlOJSO"><img src="https://z3.ax1x.com/2021/11/07/IlOJSO.png"></a><br>并且在User组件中定义它的Link，然后放入<outlet>，来渲染子路由的element所给我们展示的页面<br><a href="https://imgtu.com/i/IlOYlD"><img src="https://z3.ax1x.com/2021/11/07/IlOYlD.png" alt="User中的Outlet"></a></outlet></userdetail></userlist></user></p><p><a href="https://imgtu.com/i/IlOd0A"><img src="https://z3.ax1x.com/2021/11/07/IlOd0A.png" alt="userlist"></a></p><p><a href="https://imgtu.com/i/IlOwTI"><img src="https://z3.ax1x.com/2021/11/07/IlOwTI.png" alt="userdetail"></a></p><h3 id="钩子useRoutes"><a href="#钩子useRoutes" class="headerlink" title="钩子useRoutes"></a>钩子useRoutes</h3><p>上面我们都是把 Route 作为 Routes 的 children<br>但是我们还可以通过useRoutes生成对应的 element<br>    import  { useRoutes } from ‘react-router-dom’<br>    function App() {<br>    const element = useRoutes([<br>    {<br>    path: ‘/‘,<br>    element: <layout>,<br>    children: [{<br>    path: ‘auth/<em>‘,<br>    element: <auth><br>    },<br>    {<br>    path: ‘basic/</auth></em>‘,<br>    element: <basic><br>    }<br>    ]<br>    }<br>    ])<br>    return (<br>    {element}<br>    )<br>    }</basic></layout></p><p>这种配置项让我们可以清晰地看出路由的嵌套结构</p><h3 id="Link-state"><a href="#Link-state" class="headerlink" title="Link state"></a>Link state</h3><link state="">，即点击后可以给 to 传对应的 state<h3 id="Link-replace"><a href="#Link-replace" class="headerlink" title="Link replace"></a>Link replace</h3><link replace="">，默认 false，即跳转路由要用 push 还是 replace<h3 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h3><p>useHistory 被干掉了，换成了 useNavigate<br>你可以将history.push替换成navigate(to)<br>    // v6<br>    navigate(‘/home’);<br>    //v5<br>    history.push(‘/home’)<br>    // v6<br>    navigate(‘/home’, { replace: true });<br>    //v5<br>    history.replace(‘/home’)</p><h3 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h3><p>以往总是要通过match.params.id来获取一些动态的参数<br><a href="https://imgtu.com/i/IlOBkt"><img src="https://z3.ax1x.com/2021/11/07/IlOBkt.png"></a><br>现在可以通过useParams()来获取这些动态变化的参数了</p>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> react-router </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app</title>
      <link href="/posts/e19785da.html"/>
      <url>/posts/e19785da.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="项目搭建-暂不支持vite搭建"><a href="#项目搭建-暂不支持vite搭建" class="headerlink" title="项目搭建(暂不支持vite搭建)"></a>项目搭建(暂不支持vite搭建)</h3><pre><code>1.全局安装    npm install -g @vue/cli2.创建项目    vue create -p dcloudio/uni-preset-vue 项目名字3.启动项目(微信小程序)    npm run dev:mp-weixin4.微信小程序开发者工具导入项目</code></pre><p>App.vue  应用配置，用来配置App全局样式以及监听<br>main.js  Vue初始化入口文件<br>manifest.json  配置应用名称、appid、logo、版本等打包信息<br>pages.json  配置页面路由、导航条、选项卡等页面类信息<br>uni.scss  内置sass变量，可以直接使用</p><p>pages<br>    index<br>        index.vue  页面组件<br>static  静态资源<br>    logo.png</p><h3 id="样式和sass"><a href="#样式和sass" class="headerlink" title="样式和sass"></a>样式和sass</h3><pre><code>1.支持小程序的rpx和h5的vw、vh2.内置sass的配置，只需要安装依赖即可    npm install sass-loader node-sass3.vue组件中，在style标签加入属性    &lt;style lang = 'scss'&gt;</code></pre><h3 id="全局共享数据"><a href="#全局共享数据" class="headerlink" title="全局共享数据"></a>全局共享数据</h3><pre><code>通过vue的原型共享数据    Vue.prototype.baseRRL="";通过globalData共享数据    微信小程序独有的        getApp().globalData.text = '';</code></pre><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><pre><code>uni-app框架的生命周期结合了vue和微信小程序全局APP中使用onLaunch表示应用启动时页面中使用onLoad或者onShow分别表示页面加载完毕和页面显示组件中使用mounted组件挂在完毕</code></pre><h3 id="全部的生命周期"><a href="#全部的生命周期" class="headerlink" title="全部的生命周期"></a>全部的生命周期</h3><pre><code>uni-app  https://uniapp.dcloud.io/frame?id=生命周期vue https://cn.vuejs.org/v2/guide/instance.html?#生命周期图示微信小程序  https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html</code></pre><p>​    </p><h1 id="全局配置中几个常用的配置"><a href="#全局配置中几个常用的配置" class="headerlink" title="全局配置中几个常用的配置"></a>全局配置中几个常用的配置</h1><pre><code>##  globalStyle###  属性名字                        类型       默认值          描述###  navigationBarBackgroundColor   HexColor    #F7F7F7     导航栏背景颜色###  navigationBarTextStyle            String        white     导航栏标题颜色，只有black/white###  navigationBarTitleText            String                 导航栏标题文字内容###  backgroundColor                HexColor    #ffffff     窗口的背景色###  backgroundTextStyle            String        dark     下拉loading的样式，仅支持dark/light###  enablePullDownRefresh            Boolean        false     是否开启下拉刷新###  onReachBottomDistance            Number        50         上拉触底事件触发的距离，单位只支持px</code></pre><h3 id="condition启动模式配置"><a href="#condition启动模式配置" class="headerlink" title="condition启动模式配置"></a>condition启动模式配置</h3><pre><code>    启动模式配置，仅开发期间生效，用于模拟直达页面的场景</code></pre><p>current Number 是  当前激活的模式，list节点的索引值<br>list    Array  是  启动模式列表</p><p>list说明<br>    name  String   是  启动模式名称<br>    path  String   是  启动页面路径<br>    query String   否  启动参数，可在页面的onload函数里获得</p><h3 id="uni-app中的样式"><a href="#uni-app中的样式" class="headerlink" title="uni-app中的样式"></a>uni-app中的样式</h3><pre><code>## 使用@import语句可以导入外联样式表，@import后需要导外联央视的相对路径，用;结束# 传参## 定义函数后，函数中传参，获取参数，如果传递$event,则可以拿e去获取事件对象# 生命周期## onLaunch  初始化完成时触发，全局触发一次## onShow    启动后，或从后台进入前台显示## onHide    从前台进入后台## onError   报错触发# 页面生命周期## onLoad   监听页面加载，参数为上个页面传递的数据## onShow   监听页面显示，包括从下级页面点返回露出当前页面## onReady  初次渲染完成## onHide   监听页面隐藏## onUnload 监听页面卸载# 下拉刷新## 不推荐全局配置，应该哪个页面需要配置哪个### 在pages.json中找到pages节点，在页面中添加style，开启enablePullDownRefresh### 当处理完数据后，uni.stopPullDownRefresh可以停止刷新# get请求## uni.request(Object)# 数据缓存## uni.setStorage(Object)### key        String      是 本地缓存中指定的key### data       any         是 存储的内容### success  function    否 接口调用成功的回调函数### fail     function    否 失败的回调函数### complete function    否 调用结束的回调函数# 条件注释## 实现用特殊注释作为标记，根据特殊的注释编译到不同平台### 写法:#### #ifdef开头，#endif结尾</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/posts/e3e08109.html"/>
      <url>/posts/e3e08109.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装TS"><a href="#安装TS" class="headerlink" title="安装TS"></a>安装TS</h3><pre><code>npm install -g typescripttsc -V  检查版本安装是否完成</code></pre><h3 id="引入别与js的语法"><a href="#引入别与js的语法" class="headerlink" title="引入别与js的语法"></a>引入别与js的语法</h3><pre><code>html中直接引入ts文件，如果ts文件中只有单纯的js的语法代码，是可以正常引入和使用的，如果使用了ts的语法则会报错ts文件中的函数中的形参，如果使用了某个类型进行修饰，那么最终编译的js文件中是没有这个类型的终端: tsc ts文件，则会自动把ts编译为js文件</code></pre><h3 id="利用vscode自动把ts编译为js"><a href="#利用vscode自动把ts编译为js" class="headerlink" title="利用vscode自动把ts编译为js"></a>利用vscode自动把ts编译为js</h3><pre><code>1.在项目中使用     tsc --init2.修改tsconfig.json文件    "outDir":"./目录"  将编译后的js文件存放的目录    "strict":false  将严格模式关闭3.启动监视任务    终端-&gt;运行任务-&gt;监视tsconfig.json</code></pre><h3 id="类型注解-是一种轻量级的为函数或者变量添加的约束"><a href="#类型注解-是一种轻量级的为函数或者变量添加的约束" class="headerlink" title="类型注解:是一种轻量级的为函数或者变量添加的约束"></a>类型注解:是一种轻量级的为函数或者变量添加的约束</h3><pre><code>ps：ts种变量一开始是什么类型，那么后期赋值的适合，只能用这个类型的数据，是不允许用其他类型的数据赋值给当前的这个变量种如: let str : string = "王欣"    str = 10    报错但是undefined和null两种类型都可以作为其他类型的子类型，把undefined和null赋值给其他类型的变量如:    let num : number = underfined    console.log(num)    是不会报错的    如果报错，则关闭严格模式</code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><pre><code>基本的    //数组写法    let 名字 :number[] = [10,21]    //泛型写法    let 名字 :Array&lt;number&gt; = [10,21]    ps:数组定义后，里面的数据类型和定义数组时候的数据类型必须是一致的，否则会有错误提示也不会编译通过    元组：在定义数组的时候，类型和数据的个数一开始就定好了，    位置也是定死的    //元组写法    let arr3 : [string,number] = ['小小',20]</code></pre><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><pre><code>枚举里面的每一个数据值都可以叫元素，标号从0开始递增1enum Color{    red,green,blue}let color:Color = Color.red</code></pre><h3 id="any类型"><a href="#any类型" class="headerlink" title="any类型"></a>any类型</h3><pre><code>let str:any = 100str = '年少不知富婆好'//当一个数组种要存储多个数据，个数和类型不确</code></pre><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><pre><code>传参用 | 分开function (str:number | String){}</code></pre><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><pre><code>告诉编译器，解决编译时期的报错第一种写法:&lt;类型&gt;变量名第二种写法:值 as 类型</code></pre><h3 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h3><pre><code>interface Iperson{    readonly id: number//readonly代表只读    name:string    age:number    sex?:string//?代表可有可无}</code></pre><h3 id="函数中的可选和默认参数"><a href="#函数中的可选和默认参数" class="headerlink" title="函数中的可选和默认参数"></a>函数中的可选和默认参数</h3><pre><code>可选参数:函数在声明的时候，内部的参数使用了?进行修饰，那么就表示该参数可以传入野可以不用传入默认参数:在声明的时候，内部有自己的默认值</code></pre><h3 id="剩余参数-rest参数"><a href="#剩余参数-rest参数" class="headerlink" title="剩余参数(rest参数)"></a>剩余参数(rest参数)</h3><pre><code>放在函数声明的时候所有参数的最后    (()=&gt;{        function showMsg(str:string,str2:string,...args:string[]){        }        showMsg('a','b','c','d')    })()</code></pre><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><pre><code>要判断参数的类型是否一致//先进行重载函数的声明    function add(str1:string,str2:string):string    function add(str1:number,str2:number):number//在进行函数声明    function add(str1:string | number,str2:string|number):string | number{        if (typeof str1 === 'string' &amp;&amp; typeof str2 === 'string'){            return x+y        }else if(typeof str1 === 'number' &amp;&amp; typeof str2 === 'number')        return x+y    }</code></pre><h3 id="TS检视工具TSLint"><a href="#TS检视工具TSLint" class="headerlink" title="TS检视工具TSLint"></a>TS检视工具TSLint</h3><pre><code>在工厂package.json文件中配置TSLint包    "devDependencies":{        "tslint":"版本号",        "tslint-config-airbnb":"版本号",        "tslint-react":"版本号"    }    在更目录中的tslint.json文件中可以根据需要配置已有的规则在完成工程配置后需要下载所需要的依赖包npm i对于react native工程    执行命令来检查        tslint --project tsconfig.json --config tslint.json</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/posts/d74d8b76.html"/>
      <url>/posts/d74d8b76.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="聊聊git历史"><a href="#聊聊git历史" class="headerlink" title="聊聊git历史"></a>聊聊git历史</h3><pre><code>同生活中的许多伟大事物一样，Git诞生于一个极富纷争大局创新的时代。Linux内核开源项目有着为数众广的参与者。绝大多数的Linux内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991-2002年间)。到2002年，整个项目组开始启用一个专有的分布式版本控制系统BitKeeper来管理和维护代码。到了2005年，开发BitKeeper的商业公司同Linux内核开源社区的合作关系结束他们收回了Linux内核社区免费使用BitKeeper的权利这就迫使Linux开源社区(特别是Linux的缔造者Linus Torvalds)基于使用BitKeeper时的经验教训，开发出自己的版本系统。也就是后来的Git！Git是目前世界上最先进的分布式版本控制系统Git是免费的、开源的、最初Git是为了辅助Linux内核开发的，用来替代BitKeeper！</code></pre><p><a href="https://imgtu.com/i/ICAO7F"><img src="https://z3.ax1x.com/2021/11/01/ICAO7F.jpg" alt="Linux和Git之父--李纳斯·托沃兹(Linus Benedic Torvalds)1969、芬兰"></a></p><h3 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h3><p><a href="https://imgtu.com/i/ICET4H"><img src="https://z3.ax1x.com/2021/11/01/ICET4H.png" alt="git官网"></a></p><pre><code>打开[git官网](https://git-scm.com),下载git对应操作系统的版本官网下载太慢，可以用淘宝镜像下载: http://npm.taobao.org/mirrors/git-for-windows/下载对应的版本即可安装！无脑下一步~~</code></pre><p><strong>启动Git</strong><br>安装成功后在开始菜单中会有Git项，菜单下有3个程序:<br><a href="https://imgtu.com/i/ICZmOP"><img src="https://z3.ax1x.com/2021/11/01/ICZmOP.png" alt="ICZmOP.png"></a><br>    Git Bash:Unix与Linux风格的命令行，使用最多，推荐最多<br>    Git CMD:windows风格的命令行<br>    Git GUI:图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><p><strong>基本的Linux命令学习</strong></p><ul><li><p>[1] cd:改变目录</p></li><li><p>[2] cd ../回退到上一个目录</p></li><li><p>[3] pwd:显示当前所在目录的路径</p></li><li><p>[4] ls(ll):都是列出当前目录中的所有文件,只不过ll列出的内容更加详细</p></li><li><p>[5] touch:新建一个文件</p></li><li><p>[6] rm:删除一个文件</p></li><li><p>[7] mkdir:新建一个文件夹或目录</p></li><li><p>[8] rm -r:删除一个文件夹</p></li><li><p>[9] mv:移动文件mv index.js src index.js是要移动的文件，src是目标文件夹，</p><p>​            当然，这样写必须保证文件和目标文件夹在同一目录下</p></li><li><p>[10] reset:重新初始化终端/清屏</p></li><li><p>[11] clear:清屏</p></li><li><p>[12] history:查看命令历史</p></li><li><p>[13] help:帮助</p></li><li><p>[14] exit:退出</p></li><li><p>[15] 方向键(上下):执行过的上一条命令和下一条命令</p></li><li><p>[16] #表示注释</p></li></ul><p><strong>Git配置</strong><br>查看配置 git config -l</p><p><a href="https://imgtu.com/i/ICGGp6"><img src="https://z3.ax1x.com/2021/11/01/ICGGp6.png" alt="git config -l"></a></p><p>查看不同级别的配置文件<br>    #查看系统config<br>    git config –system –list</p><pre><code>#查看当前用户(global)配置git config --global --list</code></pre><p>Git相关的配置文件:<br>    - [1] Git\mingw64\etc\gitconfig:Git安装目录下的gitconfig –system系统级<br>    - [2] C:\Users\Administrator.gitconfig 只适用于当前登录用户的配置 –global全局<br>这里可以直接编辑配置文件，通过命令设置后会响应到这里</p><h3 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h3><p><a href="https://imgtu.com/i/ICG3fx"><img src="https://z3.ax1x.com/2021/11/01/ICG3fx.png" alt="命令"></a></p><pre><code>创建工作目录与常用指令    工作目录(workspace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，页可以是一个空目录，建议不要有中文。        本地仓库搭建    创建本地仓库的方法有两种:一个是创建全新的仓库，另一个是克隆远程仓库    - [1] 创建全新的仓库，需要用GIT管理的项目的根目录执行:        # 在当前目录新建一个git代码库        $ git init    - [2] 执行后可以看到，项目目录中多了一个.git目录克隆远程仓库    克隆远程仓库    - [1] 克隆    -     # 克隆一个项目和它的整个代码历史(版本信息)    -     $ git clone [url]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单页面程序SPA的优劣</title>
      <link href="/posts/da0536b5.html"/>
      <url>/posts/da0536b5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="单页面程序的优点"><a href="#单页面程序的优点" class="headerlink" title="单页面程序的优点"></a>单页面程序的优点</h3><pre><code>## 1.良好的交互体验    单页面应用的内容的改变不需要重新加载整个页面    获取数据也是通过ajax异步获取    没有页面之间的跳转，不会白屏## 2.良好的前后端工作分离模式    后端专注于提供API接口，更易于实现API接口的复用    前端专注于页面的渲染，更利于前端工程化的发展## 3.减轻服务器的压力    服务器只提供数据，不负责页面的合成与逻辑的处理，吞吐能力会提高几倍</code></pre><h3 id="单页面的缺点"><a href="#单页面的缺点" class="headerlink" title="单页面的缺点"></a>单页面的缺点</h3><pre><code>## 1.首屏加载慢    解决方法        路由懒加载        代码压缩        CDN加速        网络传输压缩#3 2.不利于SEO    解决方法        SSR服务器端渲染</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> SPA单页面程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>props</title>
      <link href="/posts/5b7eaaa8.html"/>
      <url>/posts/5b7eaaa8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="props组件的自定义属性"><a href="#props组件的自定义属性" class="headerlink" title="props组件的自定义属性"></a>props组件的自定义属性</h3><pre><code>使用者可以通过props把数据传递到子组件的内部，供子组件进行使用&lt;my-article title="面朝大海" author="海子"/&gt;作用：父组件通过props向子组件传递要展示的数据好处：提高了组件的复用性export default{    props:['title','author'],    //在props节点中用数组声明}行内绑定动态sytle样式用:style绑定class动态的用:class，如果有多个事件的改变，再创建一个数据，绑定数据&lt;div :class="classObj"&gt;&lt;/div&gt;&lt;script&gt;    export default{        data(){            return{                classObj:{                    a:false,                    b:true                }            }        }    }&lt;/script&gt;</code></pre><h3 id="props验证"><a href="#props验证" class="headerlink" title="props验证"></a>props验证</h3><pre><code>再封装组件时对外界传递过来的props数据进行合法性的校验，从而防止数据不合法的问题使用数组类型的props节点的缺点：无法为每个prop指定具体的数据类型1.改进：让props指向一个对象而不是数组props:{    count:Number,    state:Boolean}2.若prop属性值的类型不唯一，此时可以通过数组的形式，为其指定多个属性值export default{    props:{        propA:[String,Number],    }}3.组件的某个porp属性是必填项，指定其为true表示为必填项export default{    props:{        propB:{            type:String,            required:true,        }    }}4.属性的默认值,例子中默认值为aaaexport default{    props:{        propB:{            type:String,            required:true,            default:"aaa"        }    }}5.自定义验证函数export default{    props:{        propD:{//用validator函数去定义自定义的验证函数，用value接收传递过来的数据            validator(value){                //传递的参数value必须匹配字符串的任意一个，如果匹配则validator返回值是true否则是false                return['success','warning'].indexOf(value) !== -1            }        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> props </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端路由</title>
      <link href="/posts/e439c1da.html"/>
      <url>/posts/e439c1da.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><pre><code>路由分为前端路由和后端路由    后端路由        请求方式、请求地址与function处理函数之间的对应关系    SPA与前端路由        SPA中更新页面是组件的切换，不同组件之间的切换需要通过前端路由来实现</code></pre><h3 id="前端路由的工作方法"><a href="#前端路由的工作方法" class="headerlink" title="前端路由的工作方法"></a>前端路由的工作方法</h3><pre><code>1.用户点击了页面上的路由连接2.导致了URL地址栏中的Hash值发生了变化3.前端路由监听到了Hash地址的变化4.前端路由把当前Hash地址对应的组件渲染到浏览器中</code></pre><h3 id="实现简易的前端路由的步骤-最基础的实现步骤"><a href="#实现简易的前端路由的步骤-最基础的实现步骤" class="headerlink" title="实现简易的前端路由的步骤(最基础的实现步骤)"></a>实现简易的前端路由的步骤(最基础的实现步骤)</h3><pre><code>1.导入并注册组件2.通过&lt;component&gt;标签的is属性，动态切换要显示的组件3.在组件的结构中声明&lt;a&gt;连接，点击不同的连接切换地址栏中的Hash值4.在created生命周期函数中监听浏览器地址栏中Hash地址的变化，动态切换要展示的组件的名称    通过window.onhashchange函数来获取Hash值的变化</code></pre><h3 id="实际开发的前端路由-vue-router"><a href="#实际开发的前端路由-vue-router" class="headerlink" title="实际开发的前端路由(vue-router)"></a>实际开发的前端路由(vue-router)</h3><pre><code>vue-router目前有3.x和4.x的版本    vue-router3.x只能结合vue2使用        https://router.vuejs.org/zh/    vue-router4.x只能结合vue3使用        https://next.router.vuejs.org/</code></pre><h3 id="使用vue-router4-x基本使用步骤"><a href="#使用vue-router4-x基本使用步骤" class="headerlink" title="使用vue-router4.x基本使用步骤"></a>使用vue-router4.x基本使用步骤</h3><pre><code>1.在项目中安装vue-router    npm install vue-router@next -S2.定义路由组件3.声明路由链接和占位符    可以使用&lt;router-link&gt;标签来声明路由链接，并使用&lt;router-view&gt;标签来声明路由占位符    用to属性来替代a链接的href链接,并且不用写Hash地址的#    &lt;router-link to="/home"&gt;首页&lt;/router-link&gt;4.创建路由模块    在项目中创建router.js路由模块，在其中按照步骤配置并得到实例对象        1.从vue-router中按需导入两个方法            createRouter方法用于创建路由的实例对象            createWebHashHistory用于指定路由的工作模式(hash模式)            import{ createRouter,createWebHashHistory } from 'vue-router'               2.导入需要使用路由控制的组件        3.创建路由实例对象            //创建路由实例对象            const router = createRouter({                //通过history属性指定路由的工作模式                history:createWebHashHistory(),                //通过routes数组，指定路由规则                routes:[                    //path是hash地址，component是要展示的组件                    {path:'/home',component:Home},                ],            })        4.向外共享路由实例对象        5.在main.js中导入并挂在路由模块            创建对象后，用use方法挂在路由，固定写法            const app = createApp(App)            app.use(router)            app.mount('#app')5.导入并挂在路由模块</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ref</title>
      <link href="/posts/146f3ea3.html"/>
      <url>/posts/146f3ea3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ref引用"><a href="#ref引用" class="headerlink" title="ref引用"></a>ref引用</h3><pre><code>ref用来辅助开发者在不依赖jQuery的情况下，获取DOM元素或组件的引用每个vue的组件实例上，都包含一个$refs对象，里面存储者对应的DOM元素或组件的引用默认情况下，每个组件的$refs指向一个空对象</code></pre><h3 id="ref在DOM更新之后执行操作"><a href="#ref在DOM更新之后执行操作" class="headerlink" title="ref在DOM更新之后执行操作"></a>ref在DOM更新之后执行操作</h3><pre><code>this.$nextTick(cb)方法      会把cb回调推迟到下一个DOM更新周期之后执行    通俗理解为：等组件DOM异步的重新渲染完成后再执行cb回调函数    从而保证回调函数可以操作到最新的DOM元素</code></pre><h3 id="动态更新组件"><a href="#动态更新组件" class="headerlink" title="动态更新组件"></a>动态更新组件</h3><pre><code>使用component标签，属性用is赋值，可以用v-bind绑定值</code></pre><h3 id="使用keep-alive保持状态"><a href="#使用keep-alive保持状态" class="headerlink" title="使用keep-alive保持状态"></a>使用keep-alive保持状态</h3><pre><code>默认情况下，切换动态组件时无法保持组件的状态，此时可以使用vue内置的&lt;keep-alive&gt;组件保持动态组件的状态    &lt;keep-alive&gt;        &lt;component :is="comName"&gt;&lt;/component&gt;    &lt;/keep-alive&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术篇 </category>
          
          <category> 学习篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ref </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
