<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小欣の博客</title>
  
  <subtitle>王小欣の博客</subtitle>
  <link href="https://wangchuaichuai.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangchuaichuai.github.io/"/>
  <updated>2022-08-10T02:28:02.539Z</updated>
  <id>https://wangchuaichuai.github.io/</id>
  
  <author>
    <name>王小欣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DevTools failed to load source map Could not load content for 地址</title>
    <link href="https://wangchuaichuai.github.io/posts/ee96a4c5.html"/>
    <id>https://wangchuaichuai.github.io/posts/ee96a4c5.html</id>
    <published>2022-08-10T01:51:00.000Z</published>
    <updated>2022-08-10T02:28:02.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="DevTools-failed-to-load-source-map-Could-not-load-content-for-http-localhost8080-static-js-zh-cn"><a href="#DevTools-failed-to-load-source-map-Could-not-load-content-for-http-localhost8080-static-js-zh-cn" class="headerlink" title="DevTools failed to load source map Could not load content for http://localhost8080/static/js/zh_cn"></a>DevTools failed to load source map Could not load content for <a href="http://localhost8080/static/js/zh_cn">http://localhost8080/static/js/zh_cn</a></h3><p>方法一：利用浏览器禁用，但治标不治本<br>方法二：webpack.config.js或vue.config.js添加字段</p><p>方法一：</p><ol><li>浏览器打开开发者工具，点击设置</li><li>在设置界面中点击左侧导航栏的Preferences标签栏</li><li>取消勾选Sources中的Enable JavaScript source maps</li></ol><p>方法二：webpack.config.js 或者vue.config.js中添加devtool: ‘inline-source-map’,</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">module.exports = {configureWebpack: {devtool: 'inline-source-map'}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="问题篇" scheme="https://wangchuaichuai.github.io/categories/%E9%97%AE%E9%A2%98%E7%AF%87/"/>
    
    <category term="配置篇" scheme="https://wangchuaichuai.github.io/categories/%E9%97%AE%E9%A2%98%E7%AF%87/%E9%85%8D%E7%BD%AE%E7%AF%87/"/>
    
    
    <category term="vue" scheme="https://wangchuaichuai.github.io/tags/vue/"/>
    
    <category term="eslint" scheme="https://wangchuaichuai.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>vue3+eslint遇到 The template root requires exactly one element.eslintvue/no-multiple-template-root ...</title>
    <link href="https://wangchuaichuai.github.io/posts/1d5b7024.html"/>
    <id>https://wangchuaichuai.github.io/posts/1d5b7024.html</id>
    <published>2022-08-09T03:27:00.000Z</published>
    <updated>2022-08-10T01:56:06.396Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue3-eslint遇到-The-template-root-requires-exactly-one-element-eslintvue-no-multiple-template-root-解决方案"><a href="#vue3-eslint遇到-The-template-root-requires-exactly-one-element-eslintvue-no-multiple-template-root-解决方案" class="headerlink" title="vue3+eslint遇到 The template root requires exactly one element.eslintvue/no-multiple-template-root 解决方案"></a>vue3+eslint遇到 The template root requires exactly one element.eslintvue/no-multiple-template-root 解决方案</h3><ol><li>slint配置文件，我这里是 .eslintrc.js</li><li>xtends 中的 ‘plugin:vue/essential’，改成’plugin:vue/vue3-essential’</li><li>搞定</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="问题篇" scheme="https://wangchuaichuai.github.io/categories/%E9%97%AE%E9%A2%98%E7%AF%87/"/>
    
    <category term="配置篇" scheme="https://wangchuaichuai.github.io/categories/%E9%97%AE%E9%A2%98%E7%AF%87/%E9%85%8D%E7%BD%AE%E7%AF%87/"/>
    
    
    <category term="vue" scheme="https://wangchuaichuai.github.io/tags/vue/"/>
    
    <category term="eslint" scheme="https://wangchuaichuai.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>关于node-sass安装出现command failed和Node Sass version 7.0.1 is incompatible with ^4.0.0问题</title>
    <link href="https://wangchuaichuai.github.io/posts/abb935b2.html"/>
    <id>https://wangchuaichuai.github.io/posts/abb935b2.html</id>
    <published>2022-08-08T05:57:00.000Z</published>
    <updated>2022-08-10T02:27:18.334Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="关于node-sass安装出现command-failed和Node-Sass-version-7-0-1-is-incompatible-with-4-0-0问题"><a href="#关于node-sass安装出现command-failed和Node-Sass-version-7-0-1-is-incompatible-with-4-0-0问题" class="headerlink" title="关于node-sass安装出现command failed和Node Sass version 7.0.1 is incompatible with ^4.0.0问题"></a>关于node-sass安装出现command failed和Node Sass version 7.0.1 is incompatible with ^4.0.0问题</h3><p>说明node-sass依赖python2.x版本，之后安装python2.7.8重试了下，还是一样报错。于是尝试用按照下面命令安装</p><pre class="line-numbers language-linux/windows" data-language="linux/windows"><code class="language-linux/windows">npm i node-sass -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但问题又来了，发现直接安装到node-sass7.0.1船新版本，并且会报</p><pre class="line-numbers language-error" data-language="error"><code class="language-error">in xxxx文件Syntax Error: Error: Node Sass version 7.0.1 is incompatible with ^4.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>版本7与版本4不兼容了</p><p>网上也试过了很多的方法，很多都会引发其他问题<br>最终这一种成功</p><pre class="line-numbers language-none"><code class="language-none">npm uninstall node-sass npm i sass -Dnpm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过将node-sass变成sass，最终成功运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="问题篇" scheme="https://wangchuaichuai.github.io/categories/%E9%97%AE%E9%A2%98%E7%AF%87/"/>
    
    
    <category term="package.json" scheme="https://wangchuaichuai.github.io/tags/package-json/"/>
    
  </entry>
  
  <entry>
    <title>threejs性能优化与GPU优化</title>
    <link href="https://wangchuaichuai.github.io/posts/6795e18f.html"/>
    <id>https://wangchuaichuai.github.io/posts/6795e18f.html</id>
    <published>2022-08-05T09:57:00.000Z</published>
    <updated>2022-08-05T09:59:05.115Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>three.js是目前国内开发Web3D应用最多的第三方库，它提供了非常多的3D显示功能。在使用的时候，虽然three.js 本身做了优化，但是在较大分辨率下，加载较大或者较多模型时会出现，帧率会越低，给人感觉就越卡，因此性能方面的优化对提高视觉体验有着积极影响。以下是我在项目（vue+threejs）开发结合度娘总结的一些思路，希望能有所帮助。</p><ol><li><h4 id="合理执行渲染方法"><a href="#合理执行渲染方法" class="headerlink" title="合理执行渲染方法"></a><strong>合理执行渲染方法</strong></h4><p>因为默认情况下requestAnimationFrame（）每秒执行60次，如果在里面加个for循环，代码效率就会严重影响，同时还要减少浮点计算，系统对浮点计算开支比较大，尽量写成小数乘法。</p><p>在一些特定的应用中没有必要保持Threejs渲染频率为60FPS，那么可以通过Threejs渲染时间判断来控制Threejs渲染频率，比如设置为30FPS。</p><p>下面代码通过时钟对象<code>.Clock</code>的<code>.getDelta()</code>方法获得threejs两帧渲染时间间隔，然后通过时间判断来控制渲染器渲染方法<code>.render()</code>每秒执行次数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个时钟对象Clock</span><span class="token keyword">var</span> clock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置渲染频率为30FBS，也就是每秒调用渲染器render方法大约30次</span><span class="token keyword">var</span> <span class="token constant">FPS</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">var</span> renderT <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token constant">FPS</span><span class="token punctuation">;</span> <span class="token comment">//单位秒  间隔多长时间渲染渲染一次</span><span class="token comment">// 声明一个变量表示render()函数被多次调用累积时间</span><span class="token comment">// 如果执行一次renderer.render，timeS重新置0</span><span class="token keyword">var</span> timeS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//.getDelta()方法获得两帧的时间间隔</span>  <span class="token keyword">var</span> <span class="token constant">T</span> <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">getDelta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  timeS <span class="token operator">=</span> timeS <span class="token operator">+</span> <span class="token constant">T</span><span class="token punctuation">;</span>  <span class="token comment">// requestAnimationFrame默认调用render函数60次，通过时间判断，降低renderer.render执行频率</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>timeS <span class="token operator">&gt;</span> renderT<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 控制台查看渲染器渲染方法的调用周期，也就是间隔时间是多少</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">调用.render时间间隔</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>timeS<span class="token operator">*</span><span class="token number">1000</span><span class="token operator">+</span><span class="token string">'毫秒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行渲染操作</span>    <span class="token operator">...</span>    <span class="token comment">//renderer.render每执行一次，timeS置0</span>    timeS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="共享几何体和材质"><a href="#共享几何体和材质" class="headerlink" title="共享几何体和材质"></a>共享几何体和材质</h4><p>不同的网格模型如果可以共享几何体或材质，最好采用共享的方式，如果两个网格模型无法共享几何体或材质，自然不需要共享，比如两个网格模型的材质颜色不同，这种情况下，一般要分别为网格模型创建一个材质对象</p><p>相同或者相似类型的对象生成时多使用clone()方法，例如生成多个类似的立方体，推荐使用group，结合clone()方法，代码如下</p><pre class="line-numbers language-none"><code class="language-none">const group = new THREE.Group()const bar = new THREE.Mesh(barGeo, material)bar.scale.set(0.3, 0.3, 0.3)for (let i = 0; i &lt; 80; i++) {    const cBar = bar.clone()    group.add(cBar)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="使用性能检测插件（stats-js）监测页面性能"><a href="#使用性能检测插件（stats-js）监测页面性能" class="headerlink" title="使用性能检测插件（stats.js）监测页面性能"></a>使用性能检测插件（stats.js）监测页面性能</h4><pre class="line-numbers language-none"><code class="language-none">// 引入stats.jsimport Stats from 'three/examples/js/libs/stats.min.js'const stats = new Stats()// 设置stats样式stats.dom.style.position = 'absolute';stats.dom.style.top = '0px';document.body.appendChild(stats.dom);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在渲染函数中需要添加如下代码：</p><pre class="line-numbers language-none"><code class="language-none">function Animate() {    requestAnimationFrame(Animate);    Render();}function Render() {// 更新stats    stats.update();    render.render(scene,camera);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="对粒子群进行转换，而不是每个粒子"><a href="#对粒子群进行转换，而不是每个粒子" class="headerlink" title="对粒子群进行转换，而不是每个粒子"></a>对粒子群进行转换，而不是每个粒子</h4><p>使用THREE.Sprite时，可以更好地控制单个粒子，但是当使用大量的粒子的时候，这个方法的性能会降低，并且会更复杂。此时可以使用THREE.SpriteCloud，可以轻松地管理大量的粒子，进行整体操作，此时对单个粒子的控制能力会减弱。</p></li><li><h4 id="模型的面越少越好，模型过于细致会增加渲染开销"><a href="#模型的面越少越好，模型过于细致会增加渲染开销" class="headerlink" title="模型的面越少越好，模型过于细致会增加渲染开销"></a>模型的面越少越好，模型过于细致会增加渲染开销</h4><p>three场景导入模型时，可以在保证最低清晰度的时候，降低模型的复杂度，面越多，模型越大，加载所需开销就越大</p></li><li><h4 id="分时加载"><a href="#分时加载" class="headerlink" title="分时加载"></a>分时加载</h4><p>调查显示100ms内的响应能让用户感觉非常流畅。50ms是 <code>Nicholas</code> 针对 <code>JavaScript</code> 得出的最佳经验值，setTimeout 延时25ms，25ms 保证主流浏览器都顺畅，可以使用类似的方法来优化three.js程序。</p><p>初始化方法以及渲染方法可以适当添加延时以分散同时渲染的压力。</p><p>当存在多个模型动画时，根据实际情况可以将多个动画拆分，再可以对每个动画requestAnimationFrame分别设置渲染频率。</p></li><li><h4 id="页面销毁时手动调用dispose方法，清除延时"><a href="#页面销毁时手动调用dispose方法，清除延时" class="headerlink" title="页面销毁时手动调用dispose方法，清除延时"></a>页面销毁时手动调用dispose方法，清除延时</h4><pre class="line-numbers language-none"><code class="language-none">beforeDestroy () {clearTimeout()try {this.scene.clear()this.renderer.dispose()this.renderer.forceContextLoss()this.renderer.content = null// cancelAnimationFrame(animationID) // 去除animationFrameconst gl = this.renderer.domElement.getContext('webgl')gl &amp;&amp; gl.getExtension('WEBGL_lose_context').loseContext()} catch (e) {console.log(e)}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个网格模型Mesh是包含几何体geometry和材质对象Material的，几何体geometry本质上就是顶点数据，Three.js通过WebGL渲染器解析几何体的时候会调用WebGL API创建顶点缓冲区来存储顶点数据。</p><p>如果仅仅执行<code>scene.remove(Mesh)</code>只是把网格模型从场景对象的<code>.children</code>属性中删除，解析网格模型Mesh几何体的顶点数据通过WebGL API创建的顶点缓冲区占用的内存并不会释放。</p><p>从内存中删除对象或者删除几何体时不要忘记调用以下方法，因为可能导致内存泄漏</p><p>geometry.dispose() // 删除几何体</p><p> material.dispose() // 删除材质</p></li><li><h4 id="加载-渲染时间长的添加loading效果"><a href="#加载-渲染时间长的添加loading效果" class="headerlink" title="加载/渲染时间长的添加loading效果"></a>加载/渲染时间长的添加loading效果</h4><p>当加载较大模型或者渲染比较复杂的模型时，页面会有较长时间卡顿，影响用户体验。可以添加loading效果，降低用户等待焦虑。</p></li><li><h4 id="渲染3D的显卡建议设置为独立显卡"><a href="#渲染3D的显卡建议设置为独立显卡" class="headerlink" title="渲染3D的显卡建议设置为独立显卡"></a><strong>渲染3D的显卡建议设置为独立显卡</strong></h4><p>在性能和功耗方面，集成显卡具有一般性能的特点，但基本可以满足一些日常应用，与独立显卡相比，热功耗低。虽然独立显卡的性能很强，但其热量和功耗都比较高。独立显卡在三维性能上优于集成显卡。</p></li><li><h4 id="修改浏览器GUP加速相关设置"><a href="#修改浏览器GUP加速相关设置" class="headerlink" title="修改浏览器GUP加速相关设置"></a>修改浏览器GUP加速相关设置</h4><h5 id="Chrome浏览器："><a href="#Chrome浏览器：" class="headerlink" title="Chrome浏览器："></a>Chrome浏览器：</h5><pre class="line-numbers language-none"><code class="language-none">chrome://flags/#enable-gpu-rasterization   GPU rasterization  设置为Enabledchrome://flags/#ignore-gpu-blocklist  Override software rendering list   设置为Enabledchrome://flags/#enable-zero-copy    Zero-copy rasterizer   设置为Enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="Firefox浏览器："><a href="#Firefox浏览器：" class="headerlink" title="Firefox浏览器："></a>Firefox浏览器：</h5><p>要想GPU加速文本的功能，不仅仅要下载最新的nightlyBuild火狐(Minefield)之外，还要通过以下方法操作才能开启该功能：</p><ol><li>进入about:config配置页面并搜索gfx.font</li><li>双击gfx.font_rendering.directwrite.enabled打开这项功能;</li><li>点右键新建一个integer，命名为mozilla.widget.render-mode;</li><li>为该integer赋值为6;</li><li>重启浏览器。</li></ol><h5 id="Edge（win10）浏览器："><a href="#Edge（win10）浏览器：" class="headerlink" title="Edge（win10）浏览器："></a>Edge（win10）浏览器：</h5><ol><li>使用 Windows + I 快捷键打开「Windows 设置」——导航到「系统」——「显示」选项页</li><li>点击「多显示器设置」下的「图形设置」链接，打开「图形设置」专属配置页面</li><li>在「图形性能首选项」的下拉列表中选择「通用应用」——再在「选择应用」下拉列表中添加 Microsoft Edge 浏览器。</li><li>添加好之后点击已添加的 Microsoft Edge，再点击「选项」按钮</li><li>在弹出的「图形规格」选项卡中可以看到当前系统中的所有显卡，选择「高性能」并「保存」即可指定 Microsoft Edge 永久使用使用性能最高的 GPU。</li><li>完成上述操作步骤后，再重新启动下 Microsoft Edge，它现在就应该会使用 PC 的独立显卡进行渲染任务了。</li></ol></li></ol><p>​        </p><p>tips：用threejs做大分辨率下的显示应用时，需要考虑3D渲染的显卡性能以及显卡最大分辨率与显示屏分辨率的对比情况，如果在做了相关优化之后GPU的占用率仍然偏高，页面动效卡顿，三维效果不理想，甚至出现有时候因GPU超负荷而是电脑卡死的情况，这时候就需要考虑升级显卡配置了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    <category term="学习篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="3D可视化" scheme="https://wangchuaichuai.github.io/tags/3D%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="threejs" scheme="https://wangchuaichuai.github.io/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>threejs着色器---uv动画</title>
    <link href="https://wangchuaichuai.github.io/posts/a4b3f522.html"/>
    <id>https://wangchuaichuai.github.io/posts/a4b3f522.html</id>
    <published>2022-07-06T04:37:00.000Z</published>
    <updated>2022-08-10T02:21:53.628Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="threejs着色器—uv动画"><a href="#threejs着色器—uv动画" class="headerlink" title="threejs着色器—uv动画"></a>threejs着色器—uv动画</h3><p>UV动画的实现方式，一种是通过Texture偏移属性offset实现UV动画，另一种方式是通过着色器代码的方式实现UV动画。</p><h4 id="Texture偏移属性offset实现UV动画"><a href="#Texture偏移属性offset实现UV动画" class="headerlink" title="Texture偏移属性offset实现UV动画"></a>Texture偏移属性offset实现UV动画</h4><p>.wrapS定义了纹理如何水平包裹，并对应于UV映射中的U.</p><p>.wrapT这定义了纹理垂直包裹的方式，与UV映射中的V相对应.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> texture <span class="token operator">=</span> textureLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'./texture.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置重复的作用是：能够让一个效果循环</span>texture<span class="token punctuation">.</span>wrapS <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>RepeatWrapping<span class="token punctuation">;</span>texture<span class="token punctuation">.</span>wrapT <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>RepeatWrapping<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染函数周期性执行的过程中，Three.js纹理对象Texture的偏移属性offset两个分量x和y递增或递减。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 每次渲染对纹理对象进行偏移，不停的偏移纹理，就产生了动画的效果</span>  texture<span class="token punctuation">.</span>offset<span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token number">0.001</span><span class="token punctuation">;</span>  texture<span class="token punctuation">.</span>offset<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token number">0.001</span><span class="token punctuation">;</span>  group<span class="token punctuation">.</span><span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.005</span><span class="token punctuation">)</span>  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="着色器中uniform变量更新"><a href="#着色器中uniform变量更新" class="headerlink" title="着色器中uniform变量更新"></a>着色器中uniform变量更新</h4><p>通过自定着色器代码的方式实现UV动画，基本思路就是在片元着色器中声明一个时间变量time，然后在JavaScript代码中更新着色器中的时间变量time。时间变量time变化后，通过vec2 newT= vUv + vec2( -0.02, 0.02 ) * time;改变插值后的纹理坐标vUV，纹理坐标变化了，渲染的时候，纹理采样的结果肯定发生了变化。</p><p>片元着色器中声明的一个时间变量time</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明一个时间变量用来控制UV动画</span>uniform float time<span class="token punctuation">;</span><span class="token comment">// 声明一个纹理对象变量</span>uniform sampler2D texture<span class="token punctuation">;</span><span class="token comment">// 顶点片元化后有多少个片元就有多少个纹理坐标数据vUv</span>varying vec2 vUv<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  vec2 newT<span class="token operator">=</span> vUv <span class="token operator">+</span> <span class="token function">vec2</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">0.02</span><span class="token punctuation">,</span> <span class="token number">0.02</span> <span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">;</span>  <span class="token comment">//通过偏移后的纹理坐标newT采样像素</span>  gl_FragColor <span class="token operator">=</span> <span class="token function">texture2D</span><span class="token punctuation">(</span> texture<span class="token punctuation">,</span> newT <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 整体透明度增加</span>  gl_FragColor<span class="token punctuation">.</span>a <span class="token operator">*=</span><span class="token number">0.6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过自定义着色器ShaderMaterial的属性.uniforms设置传递给片元着色器中的变量time的值</p><pre class="line-numbers language-shaders" data-language="shaders"><code class="language-shaders">uniforms: {  // 对应片元着色器中的时间变量time  time: {    value: 0.0  },},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在渲染函数中不停地更新ShaderMaterial对象uniforms属性的时间变量time的值，每次执行新的渲染，Threejs系统会自动更新片元着色器中的时间变量time的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个时钟对象T</span><span class="token keyword">var</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 渲染函数</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 获得两次渲染的时间间隔deltaTime</span>  <span class="token keyword">var</span> deltaTime <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">getDelta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更新uniforms中时间，这样就可以更新着色器中time变量的值</span>  material<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>time<span class="token punctuation">.</span>value <span class="token operator">+=</span> deltaTime<span class="token punctuation">;</span>  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    <category term="学习篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="threejs" scheme="https://wangchuaichuai.github.io/tags/threejs/"/>
    
    <category term="3D" scheme="https://wangchuaichuai.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>使用bcryptjs对nest中的密码进行加密</title>
    <link href="https://wangchuaichuai.github.io/posts/a0db594.html"/>
    <id>https://wangchuaichuai.github.io/posts/a0db594.html</id>
    <published>2022-07-02T04:37:00.000Z</published>
    <updated>2022-07-06T00:39:18.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用bcryptjs对nest中的密码进行加密"><a href="#使用bcryptjs对nest中的密码进行加密" class="headerlink" title="使用bcryptjs对nest中的密码进行加密"></a>使用bcryptjs对nest中的密码进行加密</h3><p>密码不能以明文形式保存到数据库中，否则数据泄露密码就会被知道。而一般的加密方式由于加密规则固定，很容易被破解，安全系数不高。密码加盐的加密方式，能很好的解决这一点。解决字典攻击的方式 是加盐。</p><p>1.bcryptjs是nodejs中比较好的一款加盐(salt)加密的包.<br>2.所谓加盐.就是系统生成一串随机值,然后混入原始密码中,然后按照加密方式生成一串字符串保存在服务器。<br>3.安装</p><pre class="line-numbers language-none"><code class="language-none">npm install bcryptjsyarn add bcryptjscnpm install bcryptjs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * bcryptjs  加密 */</span><span class="token keyword">const</span> bcryptjs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bcryptjs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">'123456789'</span><span class="token punctuation">;</span><span class="token comment">/** * 加密处理 - 同步方法 * bcryptjs.hashSync(data, salt) *    - data  要加密的数据 *    - slat  用于哈希密码的盐。如果指定为数字，则将使用指定的轮数生成盐并将其使用。推荐 10 */</span><span class="token keyword">let</span> hashPassword<span class="token operator">=</span>bcryptjs<span class="token punctuation">.</span><span class="token function">hashSync</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasPwd<span class="token punctuation">)</span> <span class="token comment">// $2a$10$y5WA7lOVpzxVh.pqK3kUzOFZaJZXUMutvb3EG0qocgRxGcKQG36ou</span><span class="token comment">/** * 校验 - 使用同步方法 * bcryptjs.compareSync(data, encrypted) *    - data        要比较的数据, 使用登录时传递过来的密码 *    - encrypted   要比较的数据, 使用从数据库中查询出来的加密过的密码 */</span><span class="token keyword">let</span> comparePwd<span class="token operator">=</span>bcryptjs<span class="token punctuation">.</span><span class="token function">compareSync</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>hashPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>comparePwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">let</span> comparePwd<span class="token operator">=</span>bcryptjs<span class="token punctuation">.</span><span class="token function">compareSync</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>comparePwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    <category term="学习篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="nestjs" scheme="https://wangchuaichuai.github.io/tags/nestjs/"/>
    
    <category term="nodejs" scheme="https://wangchuaichuai.github.io/tags/nodejs/"/>
    
    <category term="加密" scheme="https://wangchuaichuai.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>react项目打包后本地运行</title>
    <link href="https://wangchuaichuai.github.io/posts/3217acb4.html"/>
    <id>https://wangchuaichuai.github.io/posts/3217acb4.html</id>
    <published>2022-06-16T09:37:00.000Z</published>
    <updated>2022-06-16T09:56:19.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="react项目本地打包后直接运行"><a href="#react项目本地打包后直接运行" class="headerlink" title="react项目本地打包后直接运行"></a>react项目本地打包后直接运行</h3><p>在打包之前,在package.json中private下(位置任意)添加”homepage”: “./“</p><p>这样在你点击index.html时候路径没有问题不会报错,但是页面可能还是空白的</p><p>然后将项目中的引用路由时候的BrowserRouter改为HashRouter,所有用到的地方都要改</p><p>然后执行yarn build 或者 npm run build</p><p>再点开index.html就不会报错</p><p>原因：<br>你必须把build里的文件直接放到应用服务器的根路径下，比如，你的服务器IP是172.16.38.253，应用服务器端口为8080，你应该保证</p><p>在服务器下运行和直接打开html文件有什么区别？<br>最直接的区别，很容易注意到，一个是file协议，另一个是http协议。file协议更多的是将该请求视为一个本地资源访问请求，和你使用资源管理器打开是一样的，是纯粹的请求本地文件。而http请求方式则是通过假架设一个web服务器，解析http协议的请求然后向浏览器返回资源信息。我们所开发的html文件最后必定是会以网页的形式部署在服务器上，通过http协议访问，所以我们开发中也尽可能模拟线上环境，架设本地服务器，来避免file协议与http协议实现过程中的某些差异性，如某些API的差异、跨域请求的差异等。举个最容易验证的例子：在页面引入一张绝对路径的图片，即’/image/example.png’，然后分别通过这两种方式打开页面，file协议会将资源请求到根路径，而http协议虽然也会请求到根路径，但是是相对本地架设的服务器的根路径，一般也就是项目文件夹的路径。<br>html是运行于客户端的超文本语言，从安全性上来讲，服务端不能对客户端进行本地操作。即使有一些象cookie这类的本地操作，也是需要进行安全级别设置的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    <category term="学习篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="react" scheme="https://wangchuaichuai.github.io/tags/react/"/>
    
    <category term="组件" scheme="https://wangchuaichuai.github.io/tags/%E7%BB%84%E4%BB%B6/"/>
    
    <category term="打包" scheme="https://wangchuaichuai.github.io/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>css实现图片无限旋转</title>
    <link href="https://wangchuaichuai.github.io/posts/cbf7cc1c.html"/>
    <id>https://wangchuaichuai.github.io/posts/cbf7cc1c.html</id>
    <published>2022-06-06T04:37:00.000Z</published>
    <updated>2022-06-23T01:11:27.137Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="css实现图片无限旋转"><a href="#css实现图片无限旋转" class="headerlink" title="css实现图片无限旋转"></a>css实现图片无限旋转</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/路径<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.imgs</span><span class="token punctuation">{</span><span class="token property">-webkit-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite 800ms 0 ease<span class="token punctuation">;</span><span class="token property">-moz-animation</span><span class="token punctuation">:</span> rotateVbtn 5s linear infinite 800ms 0 ease<span class="token punctuation">;</span><span class="token property">-ms-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite 800ms 0 ease<span class="token punctuation">;</span><span class="token property">animation</span><span class="token punctuation">:</span> rotateVbtn 5s linear infinite 800ms 0 ease<span class="token punctuation">;</span><span class="token property">-moz-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token property">-webkit-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token property">-o-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token property">-ms-animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token property">animation</span><span class="token punctuation">:</span>rotateVbtn 5s linear infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rotateVbtn1</span> <span class="token punctuation">{</span><span class="token selector">//重复旋转45度，更改成360即可重复旋转0%</span> <span class="token punctuation">{</span><span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">100%</span> <span class="token punctuation">{</span><span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    <category term="学习篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="css" scheme="https://wangchuaichuai.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Error webpack在打包时候报operation not permitted</title>
    <link href="https://wangchuaichuai.github.io/posts/50206a6.html"/>
    <id>https://wangchuaichuai.github.io/posts/50206a6.html</id>
    <published>2022-05-25T02:47:00.000Z</published>
    <updated>2022-05-27T02:27:20.569Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="webpack在打包时候报这个错：Error-EPERM-operation-not-permitted"><a href="#webpack在打包时候报这个错：Error-EPERM-operation-not-permitted" class="headerlink" title="webpack在打包时候报这个错：Error:EPERM:operation not permitted"></a>webpack在打包时候报这个错：Error:EPERM:operation not permitted</h3><p><a href="https://imgtu.com/i/XFoPDP"><img src="https://s1.ax1x.com/2022/05/25/XFoPDP.png" alt="XFoPDP.png"></a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 输出文件设置为名称+hash</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'js/[name].[hash].js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>只需要将<span class="token punctuation">.</span><span class="token punctuation">.</span>去掉或者<span class="token punctuation">.</span>去掉即可解决<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 输出文件设置为名称+hash</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'js/[name].[hash].js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/dist/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
    <category term="hooks" scheme="https://wangchuaichuai.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>ErrorFailed to load parser ‘babel-eslint‘ declared</title>
    <link href="https://wangchuaichuai.github.io/posts/6d39992.html"/>
    <id>https://wangchuaichuai.github.io/posts/6d39992.html</id>
    <published>2022-05-25T01:47:00.000Z</published>
    <updated>2022-05-27T02:27:20.564Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Error-Failed-to-load-parser-‘babel-eslint‘-declared-in-‘node-modules-shallowequal-package-json‘-Ca"><a href="#Error-Failed-to-load-parser-‘babel-eslint‘-declared-in-‘node-modules-shallowequal-package-json‘-Ca" class="headerlink" title="Error: Failed to load parser ‘babel-eslint‘ declared in ‘node_modules/shallowequal/package.json‘: Ca"></a>Error: Failed to load parser ‘babel-eslint‘ declared in ‘node_modules/shallowequal/package.json‘: Ca</h3><p><a href="https://imgtu.com/i/XFHPD1"><img src="https://s1.ax1x.com/2022/05/25/XFHPD1.png" alt="XFHPD1.png"></a><br>只需要手动安装 babel-eslint<br>yarn add  -D babel-eslint后重启vscode即可解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
    <category term="hooks" scheme="https://wangchuaichuai.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>根据页面大小网格布局自适应两行或三行</title>
    <link href="https://wangchuaichuai.github.io/posts/d18909b7.html"/>
    <id>https://wangchuaichuai.github.io/posts/d18909b7.html</id>
    <published>2022-05-13T01:47:00.000Z</published>
    <updated>2022-05-13T01:57:49.668Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="根据页面大小网格布局自适应两行或三行"><a href="#根据页面大小网格布局自适应两行或三行" class="headerlink" title="根据页面大小网格布局自适应两行或三行"></a>根据页面大小网格布局自适应两行或三行</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contain1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contain2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.item1</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.item</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法1. 使用@media媒体查询</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">// 使用<span class="token atrule"><span class="token rule">@media</span> screen 和<span class="token keyword">and</span>连接其定义的最小或者最大的屏幕尺寸，我这里定义大于1366px现实一行4个，小于1366px一行展示三个，如果需要改变列的话，将属性grid-template-columns改成grid-template-rows@media screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>0px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">.contain2</span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 33.3% 33.3% 33.3%<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>1366px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">.contain2</span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 25% 25% 25% 25%<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2. 使用grid属性进行自适应</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">// 使用repeat的auto-fill进行自动填充，然后设置每一块的大小，自己计算一下，我这里设定分界点是1366px，如果大于的话，一个item是300px，稍微给多一点设置margin等间隔能显示出来设置为320px即可.contain1</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> 320px<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
    <category term="hooks" scheme="https://wangchuaichuai.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>在hooks中怎么做类似PureComponent对props的浅比较</title>
    <link href="https://wangchuaichuai.github.io/posts/3987f34f.html"/>
    <id>https://wangchuaichuai.github.io/posts/3987f34f.html</id>
    <published>2022-05-11T07:15:00.000Z</published>
    <updated>2022-05-11T09:53:38.289Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="在hooks中怎么做类似PureComponent对props的浅比较"><a href="#在hooks中怎么做类似PureComponent对props的浅比较" class="headerlink" title="在hooks中怎么做类似PureComponent对props的浅比较"></a>在hooks中怎么做类似PureComponent对props的浅比较</h3><p>在类组件中使用PureComponent可以对props进行浅比较<br>在函数式组件中使用memo包裹组件，使用useMemo包裹值，使用useCallback包裹方法，少一个都会使缓存的组件进行更新无法起到缓存组件的作用</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Demo extends React.PureComponent {// class组件constructor(props) {super(props)this.state = {age: 20}}conponentDidMount() {fetch('xx').then( res =&gt; {if(res) {this.setState({age: res.age})}})}   const setAgeH = () =&gt; {}   const setnameH = () =&gt; {}   const setAgeH = usecallback( () =&gt; {}, [])   const setnameH = usecallback( () =&gt; {}, [])render() {const { age } = this.statereturn &lt;div&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;{{age}}&lt;/span&gt;   &lt;/div&gt;}}// hooksconst Age = React.memo(({age,setAge}) =&gt; {return &lt;div&gt;{{age}}&lt;/div&gt;})function Demo() {       useEffect( () =&gt; {               console.log(fetchInfo)           }, [fetchInfo])       const fetchInfo = useCallback ( () =&gt; {               fetch('xxx').then( res =&gt; {                   if(res){                       // setAge(res.age)                       setAge((oldAge) =&gt; {                           return oldAge + res.age                       })                   }               })           }, [name])       return  &lt;div&gt;               &lt;span&gt;年龄&lt;/span&gt;               &lt;span&gt;{{age}}&lt;/span&gt;               &lt;Age age={{age}} setAge={{setAgeH}} /&gt;               &lt;Name name={{name}} setname={{setnameH}} /&gt;               &lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
    <category term="hooks" scheme="https://wangchuaichuai.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>react memo 和 react.fc的使用</title>
    <link href="https://wangchuaichuai.github.io/posts/7fb96dfc.html"/>
    <id>https://wangchuaichuai.github.io/posts/7fb96dfc.html</id>
    <published>2022-05-11T07:15:00.000Z</published>
    <updated>2022-05-11T09:53:38.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="react-memo-和-react-fc的使用"><a href="#react-memo-和-react-fc的使用" class="headerlink" title="react memo 和 react.fc的使用"></a>react memo 和 react.fc的使用</h3><p>1.memo<br>介绍：<br>React.memo 为高阶组件。它与 React.PureComponent 非常相似，但它适用于函数组件，但不适用于 class 组件。<br>如果你的函数组件在给定相同 props 的情况下渲染相同的结果，那么你可以通过将其包装在 React.memo 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。<br>React.memo 仅检查 props 变更。如果函数组件被 React.memo 包裹，且其实现中拥有 useState 或 useContext 的 Hook，当 context 发生变化时，它仍会重新渲染。<br>默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const comp = () =&gt; {return &lt;div&gt;1&lt;/div&gt;}export default React.memo(comp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>总结：包裹函数组件 避免相同prop下的重复渲染，以达到优化效果</p><p>2.React.FC<br>介绍：</p><p>1.React.FC是函数式组件，是在TypeScript使用的一个泛型，FC就是FunctionComponent的缩写，事实上React.FC可以写成React.FunctionComponent：</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const App: React.FunctionComponent&lt;{ message: string }&gt; = ({ message }) =&gt; (  &lt;div&gt;{message}&lt;/div&gt;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.React.FC 包含了 PropsWithChildren 的泛型，不用显式的声明 props.children 的类型。React.FC&lt;&gt; 对于返回类型是显式的，而普通函数版本是隐式的（否则需要附加注释）。<br>3.React.FC提供了类型检查和自动完成的静态属性：displayName，propTypes和defaultProps（注意：defaultProps与React.FC结合使用会存在一些问题）。</p><p>```react<br>interface IProps {<br>    name: string<br>    phone: number<br>}<br>const App: React.FC<iprops> = (props: PropsWithChildren<iprops>) =&gt; {<br>    const { name, phone } = props<br>    return </iprops></iprops></p><div>{ name }</div><br>}<p></p><p>使用：<br>总结：React.FC 表示使用类型检查并且表示是函数式组件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
    <category term="hooks" scheme="https://wangchuaichuai.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>useEffect使用定时器出现重复问题</title>
    <link href="https://wangchuaichuai.github.io/posts/1e589684.html"/>
    <id>https://wangchuaichuai.github.io/posts/1e589684.html</id>
    <published>2022-05-08T07:15:00.000Z</published>
    <updated>2022-05-08T07:20:17.612Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="useEffect使用定时器出现重复问题"><a href="#useEffect使用定时器出现重复问题" class="headerlink" title="useEffect使用定时器出现重复问题"></a>useEffect使用定时器出现重复问题</h3><p>react中设置定时器，最后需要将定时器清理，否则下次会出现多次调用的问题<br>使用useEffect来模拟componentWillUnmount生命周期来进行</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Timer() {    let [time, setTime] = useState(5);    useEffect(() =&gt; {        let timer = setInterval(() =&gt; {          setTime(time - 1);        }, 1000)        return () =&gt; clearInterval(timer);    }, );    return &lt;div&gt;{time}&lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
    <category term="hooks" scheme="https://wangchuaichuai.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>React中useState两次渲染</title>
    <link href="https://wangchuaichuai.github.io/posts/6556e27c.html"/>
    <id>https://wangchuaichuai.github.io/posts/6556e27c.html</id>
    <published>2022-05-07T08:37:00.000Z</published>
    <updated>2022-05-07T10:12:13.660Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="React中useState两次渲染"><a href="#React中useState两次渲染" class="headerlink" title="React中useState两次渲染"></a>React中useState两次渲染</h3><p>函数式组件使用useState后，console.log打印组件重复渲染<br>问题<br>  index.tsx中的&lt;React.StrictMode&gt;的问题</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">ReactDOM.render(&lt;React.StrictMode&gt;&lt;App /&gt;&lt;/React.StrictMode&gt;document.getElementById('ROOT'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在生产模式下不会出现此问题<br>StrictMode有助于</p><ul><li>识别不安全的生命周期</li><li>关于使用过字符串 ref API的警告</li><li>关于使用废弃的findDOMNode方法的警告</li><li>监测意外的副作用</li><li>监测过时的context API</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
    <category term="hooks" scheme="https://wangchuaichuai.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>使用Yarn创建React项目遇到的问题</title>
    <link href="https://wangchuaichuai.github.io/posts/7e5ed880.html"/>
    <id>https://wangchuaichuai.github.io/posts/7e5ed880.html</id>
    <published>2022-05-06T08:37:00.000Z</published>
    <updated>2022-05-07T10:12:13.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用Yarn创建React项目遇到的问题"><a href="#使用Yarn创建React项目遇到的问题" class="headerlink" title="使用Yarn创建React项目遇到的问题"></a>使用Yarn创建React项目遇到的问题</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">yarn create react-app antd-demoyarn create v1.17.3[1/4] Resolving packages...[2/4] Fetching packages...[3/4] Linking dependencies...[4/4] Building fresh packages...success Installed "create-react-app@3.1.1" with binaries:      - create-react-app[############################################################################################] 92/92Creating a new React app in H:\React\demo.Installing packages. This might take a couple of minutes.Installing react, react-dom, and react-scripts...yarn add v1.17.3info No lockfile found.[1/4] Resolving packages...[2/4] Fetching packages...error eslint@6.2.2: The engine "node" is incompatible with this module. Expected version "^8.10.0 || ^10.13.0 || &gt;=11.10.1". Got "10.8.0"error Found incompatible module.info Visit https://yarnpkg.com/en/docs/cli/add for documentation about this command.Aborting installation.  yarnpkg add --exact react react-dom react-scripts --cwd H:\React\antd-demo has failed.Deleting generated file... package.jsonDeleting antd-demo/ from H:\ReactDone.error Command failed.Exit code: 1Command: C:\Users\YWL\AppData\Local\Yarn\bin\create-react-appArguments: antd-demoDirectory: H:\ReactOutput:info Visit https://yarnpkg.com/en/docs/cli/create for documentation about this command.PS H:\React&gt; yarn startyarn run v1.17.3error Couldn't find a package.json file in "H:\\React"info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决</p><pre class="line-numbers language-none"><code class="language-none">yarn config set ignore-engines true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react报错 Can&#39;t perform a React state update on an unmounted component</title>
    <link href="https://wangchuaichuai.github.io/posts/3b89b733.html"/>
    <id>https://wangchuaichuai.github.io/posts/3b89b733.html</id>
    <published>2022-05-02T08:37:00.000Z</published>
    <updated>2022-05-27T02:23:13.732Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="react报错：Can’t-perform-a-React-state-update-on-an-unmounted-component"><a href="#react报错：Can’t-perform-a-React-state-update-on-an-unmounted-component" class="headerlink" title="react报错：Can’t perform a React state update on an unmounted component"></a>react报错：Can’t perform a React state update on an unmounted component</h3><p>在React开发中，我们经常可能会遇到这样一个警告：</p><pre class="line-numbers language-error" data-language="error"><code class="language-error">ERROR: Can't perform a React state update on an unmounted componentThis is a no-op, but it indicates a memory leak in your application.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们不能在组件销毁后设置state，防止内存泄漏<br>关于react中切换路由时报以上错误，实际的原因是因为在组件挂载（mounted）之后进行了异步操作，比如ajax请求或者设置了定时器等，而你在callback中进行了setState操作。当你切换路由时，组件已经被卸载（unmounted）了，此时异步操作中callback还在执行，因此setState没有得到值。</p><p>解决的方式有两种：</p><p>一、在卸载的时候对所有的操作进行清除（例如：清除定时器）</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">componentDidMount = () =&gt; {timer = setTimeout( () =&gt; {}, 1000)}componentWillUnMount = () =&gt; {clearTimeout(timer)}// hooks中使用useeffect模拟生命周期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、设置一个flag，当unmount的时候重置这个flag</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">componentDidMount =() =&gt; {this.flag = trueaxios操作}componentWillUnMount =() =&gt; {this.flag = false}// hooks中使用useeffect模拟生命周期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、最简单的方式（万金油）</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">componentDidMount =() =&gt; {axios请求}componentWillUnmount =() =&gt; {this.setState = (state, callback) =&gt; {return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>typescript使用可选属性报错可能未定义</title>
    <link href="https://wangchuaichuai.github.io/posts/57632486.html"/>
    <id>https://wangchuaichuai.github.io/posts/57632486.html</id>
    <published>2022-05-01T03:37:00.000Z</published>
    <updated>2022-05-02T14:31:07.935Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="typescript使用可选属性报错可能未定义"><a href="#typescript使用可选属性报错可能未定义" class="headerlink" title="typescript使用可选属性报错可能未定义"></a>typescript使用可选属性报错可能未定义</h3><p>当使用可选属性的时候，可能会报参数未定义的错误</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>user<span class="token operator">:</span><span class="token builtin">string</span>name<span class="token operator">:</span><span class="token operator">?</span><span class="token builtin">string</span>password<span class="token operator">:</span><span class="token operator">?</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">UserInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span> state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token operator">:</span> Info<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">...</span>state<span class="token punctuation">}</span><span class="token keyword">case</span><span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">...</span>state<span class="token punctuation">}</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">...</span>state<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决：<br>将tsconfig.json中的strict属性设置为false，取消严格模式即可</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="typescript" scheme="https://wangchuaichuai.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>前端进行下载图片</title>
    <link href="https://wangchuaichuai.github.io/posts/b3977ed7.html"/>
    <id>https://wangchuaichuai.github.io/posts/b3977ed7.html</id>
    <published>2022-03-21T13:37:00.000Z</published>
    <updated>2022-03-22T09:55:33.110Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前端进行下载图片"><a href="#前端进行下载图片" class="headerlink" title="前端进行下载图片"></a>前端进行下载图片</h3><ol><li>同源情况</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// 这种情况下必须是同源，否则download则会失效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你的图片的地址<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>名字<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>下载图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>非同源情况</li></ol><p>原理类似，不过利用canvas来进行画图</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getIt</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span><span class="token literal-property property">src</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> src <span class="token operator">=</span> src   <span class="token keyword">let</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span>   <span class="token keyword">let</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>   image<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'crossOrigin'</span><span class="token punctuation">,</span> <span class="token string">'anonymous'</span><span class="token punctuation">)</span>   image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> image<span class="token punctuation">.</span>width     canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> image<span class="token punctuation">.</span>height     <span class="token keyword">let</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span>     context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>height<span class="token punctuation">)</span>     canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>height<span class="token punctuation">)</span>     <span class="token comment">//   const url = canvas.toDataURL('image/png')</span>     canvas<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>       link<span class="token punctuation">.</span>href <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>       link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">'fileName'</span>       link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>   image<span class="token punctuation">.</span>src <span class="token operator">=</span> src <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React useNavigate 和 useLocation的使用</title>
    <link href="https://wangchuaichuai.github.io/posts/e78137ec.html"/>
    <id>https://wangchuaichuai.github.io/posts/e78137ec.html</id>
    <published>2022-03-18T03:37:00.000Z</published>
    <updated>2022-03-22T09:55:33.107Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="React-useNavigate-和-useLocation的使用"><a href="#React-useNavigate-和-useLocation的使用" class="headerlink" title="React useNavigate 和 useLocation的使用"></a>React useNavigate 和 useLocation的使用</h3><p>使用useNavigate来跳转，在页面内使用useLocation来接收数据</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 发送import { useNavigate } from 'react-router-dom'let navigate = useNavigate()function post() {let name = 'hello'let psw = 123123navigate('name',{state: {name: name,psw: psw}})}// 接收import { useLocation } from 'react-router-dom'let localtion = useNavigate()const { state1 } = localtionconst   state2   = localtion.state// 均能获取数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术篇" scheme="https://wangchuaichuai.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="React" scheme="https://wangchuaichuai.github.io/tags/React/"/>
    
  </entry>
  
</feed>
